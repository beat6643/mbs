"""
This playbook extracts IOCs from the alert event and creates new artifacts from them so that it is easier to process in the subsequent playbooks.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


################################################################################
## Global Custom Code Start
################################################################################

################################################################################
## Global Custom Code End
################################################################################

@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'decision_1' block
    decision_1(container=container)

    return

@phantom.playbook_block()
def decision_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_6() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_merge_filehash:custom_function_result.data.*.item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        add_artifact_3(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def add_artifact_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_artifact_3() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    id_value = container.get("id", None)
    cf_merge_filehash_data = phantom.collect2(container=container, datapath=["cf_merge_filehash:custom_function_result.data.*.item"])

    parameters = []

    # build parameters list for 'add_artifact_3' call
    for cf_merge_filehash_data_item in cf_merge_filehash_data:
        parameters.append({
            "name": "Hash Artifact",
            "label": "added_from_playbook",
            "cef_name": "fileHash",
            "contains": "",
            "cef_value": cf_merge_filehash_data_item[0],
            "container_id": id_value,
            "cef_dictionary": "",
            "run_automation": False,
            "source_data_identifier": "SANDS_FireEye_Malware_Ingest_Data_Playbook",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add artifact", parameters=parameters, name="add_artifact_3", assets=["phantom"], callback=join_add_tag_1)

    return


@phantom.playbook_block()
def decision_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_5() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_merge_destinationaddress:custom_function_result.data.*.item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        add_artifact_2(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def db_is_merge_result_empty_client_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_merge_result_empty_client_ip() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_merge_sourceaddress:custom_function_result.data.*.item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        ph_add_artifact_client_ip(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def ph_add_artifact_client_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_add_artifact_client_ip() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    id_value = container.get("id", None)
    cf_merge_sourceaddress_data = phantom.collect2(container=container, datapath=["cf_merge_sourceaddress:custom_function_result.data.*.item"])

    parameters = []

    # build parameters list for 'ph_add_artifact_client_ip' call
    for cf_merge_sourceaddress_data_item in cf_merge_sourceaddress_data:
        parameters.append({
            "name": "IP Artifact",
            "label": "added_from_playbook",
            "cef_name": "sourceAddress",
            "contains": "",
            "cef_value": cf_merge_sourceaddress_data_item[0],
            "container_id": id_value,
            "cef_dictionary": "",
            "run_automation": False,
            "source_data_identifier": "SANDS_FireEye_Malware_Ingest_Data_Playbook",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add artifact", parameters=parameters, name="ph_add_artifact_client_ip", assets=["phantom"], callback=update_artifact_tags_1)

    return


@phantom.playbook_block()
def add_artifact_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_artifact_2() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    id_value = container.get("id", None)
    cf_merge_destinationaddress_data = phantom.collect2(container=container, datapath=["cf_merge_destinationaddress:custom_function_result.data.*.item"])

    parameters = []

    # build parameters list for 'add_artifact_2' call
    for cf_merge_destinationaddress_data_item in cf_merge_destinationaddress_data:
        parameters.append({
            "name": "IP Artifact",
            "label": "added_from_playbook",
            "cef_name": "sourceAddress",
            "contains": "",
            "cef_value": cf_merge_destinationaddress_data_item[0],
            "container_id": id_value,
            "cef_dictionary": "",
            "run_automation": False,
            "source_data_identifier": "SANDS_FireEye_Malware_Ingest_Data_Playbook",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add artifact", parameters=parameters, name="add_artifact_2", assets=["phantom"], callback=join_add_tag_1)

    return


@phantom.playbook_block()
def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_2() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_merge_url:custom_function_result.data.*.item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        add_artifact_4(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def decision_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_3() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_merge_domain:custom_function_result.data.*.item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        add_artifact_5(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def add_artifact_8(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_artifact_8() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    format_2 = phantom.get_format_data(name="format_2")

    parameters = []

    parameters.append({
        "name": "Event Details Artifact",
        "label": "added_from_playbook",
        "cef_name": "",
        "contains": "",
        "cef_value": "",
        "container_id": "",
        "cef_dictionary": format_2,
        "run_automation": False,
        "source_data_identifier": "SANDS_FireEye_Malware_Ingest1_Data_Playbook",
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add artifact", parameters=parameters, name="add_artifact_8", assets=["phantom"], callback=join_add_tag_1)

    return


@phantom.playbook_block()
def add_artifact_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_artifact_4() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    id_value = container.get("id", None)
    cf_merge_url_data = phantom.collect2(container=container, datapath=["cf_merge_url:custom_function_result.data.*.item"])

    parameters = []

    # build parameters list for 'add_artifact_4' call
    for cf_merge_url_data_item in cf_merge_url_data:
        parameters.append({
            "name": "URL Artifact",
            "label": "added_from_playbook",
            "cef_name": "requestURL",
            "contains": "",
            "cef_value": cf_merge_url_data_item[0],
            "container_id": id_value,
            "cef_dictionary": "",
            "run_automation": False,
            "source_data_identifier": "SANDS_FireEye_Malware_Ingest_Data_Playbook",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add artifact", parameters=parameters, name="add_artifact_4", assets=["phantom"], callback=join_add_tag_1)

    return


@phantom.playbook_block()
def update_artifact_tags_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_tags_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ph_add_artifact_client_ip_result_data = phantom.collect2(container=container, datapath=["PH_Add_Artifact_Client_IP:action_result.summary.artifact_id","PH_Add_Artifact_Client_IP:action_result.parameter.context.artifact_id"], action_results=results, scope="all")

    parameters = []

    # build parameters list for 'update_artifact_tags_1' call
    for ph_add_artifact_client_ip_result_item in ph_add_artifact_client_ip_result_data:
        if ph_add_artifact_client_ip_result_item[0] is not None:
            parameters.append({
                "add_tags": "client_ip",
                "artifact_id": ph_add_artifact_client_ip_result_item[0],
                "remove_tags": "",
                "context": {'artifact_id': ph_add_artifact_client_ip_result_item[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="update_artifact_tags_1", assets=["phantom"], callback=join_add_tag_1)

    return


@phantom.playbook_block()
def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_1() called")

    tags_value = container.get("tags", None)

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        logical_operator="or",
        conditions=[
            ["artifacts_extracted", "not in", tags_value],
            ["testing", "in", tags_value]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        cf_merge_sourceaddress(action=action, success=success, container=container, results=results, handle=handle)
        cf_merge_destinationaddress(action=action, success=success, container=container, results=results, handle=handle)
        cf_merge_url(action=action, success=success, container=container, results=results, handle=handle)
        cf_merge_domain(action=action, success=success, container=container, results=results, handle=handle)
        cf_merge_filehash(action=action, success=success, container=container, results=results, handle=handle)
        deduplicate_list_items(action=action, success=success, container=container, results=results, handle=handle)
        ph_add_artifact_empty_host_artifact(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    add_comment_3(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def ph_add_artifact_empty_host_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_add_artifact_empty_host_artifact() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    id_value = container.get("id", None)

    parameters = []

    parameters.append({
        "name": "Host Artifact",
        "label": "event",
        "cef_name": "",
        "contains": "",
        "cef_value": "",
        "container_id": id_value,
        "cef_dictionary": "",
        "run_automation": False,
        "source_data_identifier": "SANDS_FireEye_Malware_Ingest1_Data_Playbook",
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add artifact", parameters=parameters, name="ph_add_artifact_empty_host_artifact", assets=["phantom"], callback=fl_shost_artifact)

    return


@phantom.playbook_block()
def fl_shost_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_shost_artifact() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["artifact:*.cef.shost", "!=", ""]
        ],
        name="fl_shost_artifact:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_update_shost_artifact(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def format_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_2() called")

    template = """{{\"shost\": \"{0}\", \"deviceAddress\": \"{1}\", \"category\": \"{2}\", \"event_date\": \"{3}\", \"sourceAddress\": \"{4}\", \"destinationAddress\": \"{5}\",  \"event_id\": \"{6}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "deduplicate_list_items:custom_function_result.data.output_list_1.*.item",
        "deduplicate_list_items:custom_function_result.data.output_list_2.*.item",
        "deduplicate_list_items:custom_function_result.data.output_list_3.*.item",
        "deduplicate_list_items:custom_function_result.data.output_list_4.*.item",
        "deduplicate_list_items:custom_function_result.data.output_list_5.*.item",
        "deduplicate_list_items:custom_function_result.data.output_list_6.*.item",
        "deduplicate_list_items:custom_function_result.data.output_list_7.*.item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_2", scope="all", separator=", ", drop_none=True)

    add_artifact_8(container=container)

    return


@phantom.playbook_block()
def add_artifact_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_artifact_5() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    id_value = container.get("id", None)
    cf_merge_domain_data = phantom.collect2(container=container, datapath=["cf_merge_domain:custom_function_result.data.*.item"])

    parameters = []

    # build parameters list for 'add_artifact_5' call
    for cf_merge_domain_data_item in cf_merge_domain_data:
        parameters.append({
            "name": "Domain Artifact",
            "label": "added_from_playbook",
            "cef_name": "destinationDnsDomain",
            "contains": "",
            "cef_value": cf_merge_domain_data_item[0],
            "container_id": id_value,
            "cef_dictionary": "",
            "run_automation": False,
            "source_data_identifier": "SANDS_FireEye_Malware_Ingest_Data_Playbook",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add artifact", parameters=parameters, name="add_artifact_5", assets=["phantom"], callback=join_add_tag_1)

    return


@phantom.playbook_block()
def ph_update_host_artifact_shost(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_host_artifact_shost() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ph_add_artifact_empty_host_artifact_result_data = phantom.collect2(container=container, datapath=["ph_add_artifact_empty_host_artifact:action_result.summary.artifact_id","ph_add_artifact_empty_host_artifact:action_result.parameter.context.artifact_id"], action_results=results)
    fb_update_shost_artifact = phantom.get_format_data(name="fb_update_shost_artifact")

    parameters = []

    # build parameters list for 'ph_update_host_artifact_shost' call
    for ph_add_artifact_empty_host_artifact_result_item in ph_add_artifact_empty_host_artifact_result_data:
        if ph_add_artifact_empty_host_artifact_result_item[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": fb_update_shost_artifact,
                "severity": "",
                "overwrite": False,
                "artifact_id": ph_add_artifact_empty_host_artifact_result_item[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': ph_add_artifact_empty_host_artifact_result_item[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="ph_update_host_artifact_shost", assets=["phantom"], callback=join_add_tag_1)

    return


@phantom.playbook_block()
def add_comment_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_comment_3() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment="artifacts_extracted tag exists. Hence Artifacts will not be extracted again")

    return


@phantom.playbook_block()
def join_add_tag_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("join_add_tag_1() called")

    # if the joined function has already been called, do nothing
    if phantom.get_run_data(key="join_add_tag_1_called"):
        return

    # save the state that the joined function has now been called
    phantom.save_run_data(key="join_add_tag_1_called", value="add_tag_1")

    # call connected block "add_tag_1"
    add_tag_1(container=container, handle=handle)

    return


@phantom.playbook_block()
def add_tag_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_tag_1() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_tags(container=container, tags="artifacts_extracted")

    return


@phantom.playbook_block()
def fb_update_shost_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_update_shost_artifact() called")

    template = """{{\"host_name\": \"{0}\", \"client_ip\": \"{1}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_shost_Artifact:condition_1:artifact:*.cef.shost",
        "filtered-data:FL_shost_Artifact:condition_1:artifact:*.cef.sourceAddress"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_update_shost_artifact", separator=", ")

    ph_update_host_artifact_shost(container=container)

    return


@phantom.playbook_block()
def cf_merge_sourceaddress(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_merge_sourceaddress() called")

    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.sourceAddress","artifact:*.id"])

    container_artifact_cef_item_0 = [item[0] for item in container_artifact_data]

    parameters = []

    parameters.append({
        "input_1": container_artifact_cef_item_0,
        "input_2": None,
        "input_3": None,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_merge_sourceaddress", callback=db_is_merge_result_empty_client_ip)

    return


@phantom.playbook_block()
def cf_merge_destinationaddress(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_merge_destinationaddress() called")

    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.destinationAddress","artifact:*.id"])

    container_artifact_cef_item_0 = [item[0] for item in container_artifact_data]

    parameters = []

    parameters.append({
        "input_1": container_artifact_cef_item_0,
        "input_2": None,
        "input_3": None,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_merge_destinationaddress", callback=decision_5)

    return


@phantom.playbook_block()
def cf_merge_filehash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_merge_filehash() called")

    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.fileHash","artifact:*.id"])

    container_artifact_cef_item_0 = [item[0] for item in container_artifact_data]

    parameters = []

    parameters.append({
        "input_1": container_artifact_cef_item_0,
        "input_2": None,
        "input_3": None,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_merge_filehash", callback=decision_6)

    return


@phantom.playbook_block()
def cf_merge_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_merge_url() called")

    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.requestURL","artifact:*.id"])

    container_artifact_cef_item_0 = [item[0] for item in container_artifact_data]

    parameters = []

    parameters.append({
        "input_1": container_artifact_cef_item_0,
        "input_2": None,
        "input_3": None,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_merge_url", callback=decision_2)

    return


@phantom.playbook_block()
def cf_merge_domain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_merge_domain() called")

    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.destinationDnsDomain","artifact:*.cef.sourceDnsDomain","artifact:*.id"])

    container_artifact_cef_item_0 = [item[0] for item in container_artifact_data]
    container_artifact_cef_item_1 = [item[1] for item in container_artifact_data]

    parameters = []

    parameters.append({
        "input_1": container_artifact_cef_item_0,
        "input_2": container_artifact_cef_item_1,
        "input_3": None,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_merge_domain", callback=decision_3)

    return


@phantom.playbook_block()
def deduplicate_list_items(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("deduplicate_list_items() called")

    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.shost","artifact:*.cef.deviceAddress","artifact:*.cef.category","artifact:*.cef.occurred","artifact:*.cef.sourceAddress","artifact:*.cef.dest_ip","artifact:*.cef.event_id","artifact:*.id"])

    container_artifact_cef_item_0 = [item[0] for item in container_artifact_data]
    container_artifact_cef_item_1 = [item[1] for item in container_artifact_data]
    container_artifact_cef_item_2 = [item[2] for item in container_artifact_data]
    container_artifact_cef_item_3 = [item[3] for item in container_artifact_data]
    container_artifact_cef_item_4 = [item[4] for item in container_artifact_data]
    container_artifact_cef_item_5 = [item[5] for item in container_artifact_data]
    container_artifact_cef_item_6 = [item[6] for item in container_artifact_data]

    parameters = []

    parameters.append({
        "input_list_1": container_artifact_cef_item_0,
        "input_list_2": container_artifact_cef_item_1,
        "input_list_3": container_artifact_cef_item_2,
        "input_list_4": container_artifact_cef_item_3,
        "input_list_5": container_artifact_cef_item_4,
        "input_list_6": container_artifact_cef_item_5,
        "input_list_7": container_artifact_cef_item_6,
        "input_list_8": None,
        "input_list_9": None,
        "input_list_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/deduplicate_list_items", parameters=parameters, name="deduplicate_list_items", callback=format_2)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return