"""
This playbook finds all malicious IOCs in the container and list them into a note.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'fl_malicious_artifacts' block
    fl_malicious_artifacts(container=container)

    return

@phantom.playbook_block()
def fl_malicious_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_malicious_artifacts() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["malicious", "in", "artifact:*.tags"],
            ["previously_processed", "not in", "artifact:*.tags"]
        ],
        name="fl_malicious_artifacts:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        cf_mbs_list_merge_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def api_add_tag_malicious_container(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_add_tag_malicious_container() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_tags(container=container, tags="malicious")

    return


@phantom.playbook_block()
def api_note_malicious_iocs(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_malicious_iocs() called")

    fb_note_malicious_iocs = phantom.get_format_data(name="fb_note_malicious_iocs")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_note_malicious_iocs, note_format="html", title="List of Malicious IOCs")

    api_add_tag_malicious_container(container=container)

    return


@phantom.playbook_block()
def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_2() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_mbs_list_merge_1:custom_function_result.data.*.item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        cf_mbs_replace_chars_in_list_1(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def fb_note_malicious_iocs(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_note_malicious_iocs() called")

    template = """Found the below malicious IOCs from this FireEye event.\n\n%%\n{0}\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_replace_chars_in_list_1:custom_function_result.data.output_string_list.*.item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_note_malicious_iocs", separator=", ")

    api_note_malicious_iocs(container=container)

    return


@phantom.playbook_block()
def cf_mbs_list_merge_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_list_merge_1() called")

    filtered_artifact_0_data_fl_malicious_artifacts = phantom.collect2(container=container, datapath=["filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.destinationDnsDomain","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.sourceDnsDomain","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.email_sender_domain","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.requestURL","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.vaultId","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.destinationAddress","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.sourceAddress","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.deviceAddress","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.cef.sender_ip","filtered-data:fl_malicious_artifacts:condition_1:artifact:*.id"])

    filtered_artifact_0__cef_destinationdnsdomain = [item[0] for item in filtered_artifact_0_data_fl_malicious_artifacts]
    filtered_artifact_0__cef_sourcednsdomain = [item[1] for item in filtered_artifact_0_data_fl_malicious_artifacts]
    filtered_artifact_0__cef_email_sender_domain = [item[2] for item in filtered_artifact_0_data_fl_malicious_artifacts]
    filtered_artifact_0__cef_requesturl = [item[3] for item in filtered_artifact_0_data_fl_malicious_artifacts]
    filtered_artifact_0__cef_vaultid = [item[4] for item in filtered_artifact_0_data_fl_malicious_artifacts]
    filtered_artifact_0__cef_destinationaddress = [item[5] for item in filtered_artifact_0_data_fl_malicious_artifacts]
    filtered_artifact_0__cef_sourceaddress = [item[6] for item in filtered_artifact_0_data_fl_malicious_artifacts]
    filtered_artifact_0__cef_deviceaddress = [item[7] for item in filtered_artifact_0_data_fl_malicious_artifacts]
    filtered_artifact_0__cef_sender_ip = [item[8] for item in filtered_artifact_0_data_fl_malicious_artifacts]

    parameters = []

    parameters.append({
        "input_1": filtered_artifact_0__cef_destinationdnsdomain,
        "input_2": filtered_artifact_0__cef_sourcednsdomain,
        "input_3": filtered_artifact_0__cef_email_sender_domain,
        "input_4": filtered_artifact_0__cef_requesturl,
        "input_5": filtered_artifact_0__cef_vaultid,
        "input_6": filtered_artifact_0__cef_destinationaddress,
        "input_7": filtered_artifact_0__cef_sourceaddress,
        "input_8": filtered_artifact_0__cef_deviceaddress,
        "input_9": filtered_artifact_0__cef_sender_ip,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_mbs_list_merge_1", callback=decision_2)

    return


@phantom.playbook_block()
def cf_mbs_replace_chars_in_list_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_replace_chars_in_list_1() called")

    cf_mbs_list_merge_1_data = phantom.collect2(container=container, datapath=["cf_mbs_list_merge_1:custom_function_result.data.*.item"])

    cf_mbs_list_merge_1_data___item = [item[0] for item in cf_mbs_list_merge_1_data]

    parameters = []

    parameters.append({
        "input_string_list": cf_mbs_list_merge_1_data___item,
        "replace_substring": "[.]",
        "sub_string_to_be_replaced": ".",
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/replace_chars_in_list", parameters=parameters, name="cf_mbs_replace_chars_in_list_1", callback=fb_note_malicious_iocs)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return