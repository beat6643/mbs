"""
Find other systems communicating with a malicious IP.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'fl_malicious_ip' block
    fl_malicious_ip(container=container)

    return

@phantom.playbook_block()
def fl_malicious_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_malicious_ip() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["malicious", "in", "artifact:*.tags"]
        ],
        name="fl_malicious_ip:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        cf_mbs_list_merge_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def spl_other_systems_access_malicious_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("spl_other_systems_access_malicious_ip() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_spl_other_systems_access_malicious_ip__as_list = phantom.get_format_data(name="fb_spl_other_systems_access_malicious_ip__as_list")

    parameters = []

    # build parameters list for 'spl_other_systems_access_malicious_ip' call
    for fb_spl_other_systems_access_malicious_ip__item in fb_spl_other_systems_access_malicious_ip__as_list:
        if fb_spl_other_systems_access_malicious_ip__item is not None:
            parameters.append({
                "query": fb_spl_other_systems_access_malicious_ip__item,
                "command": "search",
                "display": "",
                "parse_only": "",
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("run query", parameters=parameters, name="spl_other_systems_access_malicious_ip", assets=["splunk prod"], callback=fl_spl_non_null_events_access_mal_ip)

    return


@phantom.playbook_block()
def fb_note_other_systems_acces_malicious_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_note_other_systems_acces_malicious_ip() called")

    template = """%%\nSource IP: {0}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_SPL_Non_Null_Events_Access_Mal_IP:condition_1:spl_other_systems_access_malicious_ip:action_result.data.*.src"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_note_other_systems_acces_malicious_ip", separator=", ")

    join_fb_other_systems_accessing_mal_ip(container=container)
    api_note_other_system_acces_malicious_ip(container=container)

    return


@phantom.playbook_block()
def fl_spl_non_null_events_access_mal_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_spl_non_null_events_access_mal_ip() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["spl_other_systems_access_malicious_ip:action_result.summary.total_events", ">", 0]
        ],
        name="fl_spl_non_null_events_access_mal_ip:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_note_other_systems_acces_malicious_ip(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    # collect filtered artifact ids and results for 'if' condition 2
    matched_artifacts_2, matched_results_2 = phantom.condition(
        container=container,
        conditions=[
            ["spl_other_systems_access_malicious_ip:action_result.summary.total_events", "==", 0]
        ],
        name="fl_spl_non_null_events_access_mal_ip:condition_2",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_2 or matched_results_2:
        join_fb_other_systems_accessing_mal_ip(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)

    return


@phantom.playbook_block()
def join_fb_other_systems_accessing_mal_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("join_fb_other_systems_accessing_mal_ip() called")

    if phantom.completed(action_names=["spl_other_systems_access_malicious_ip"]):
        # call connected block "fb_other_systems_accessing_mal_ip"
        fb_other_systems_accessing_mal_ip(container=container, handle=handle)

    return


@phantom.playbook_block()
def fb_other_systems_accessing_mal_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_other_systems_accessing_mal_ip() called")

    template = """No Data was found."""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_other_systems_accessing_mal_ip", separator=", ")

    api_note_other_systems_accessing_mal_ip(container=container)

    return


@phantom.playbook_block()
def api_note_other_systems_accessing_mal_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_other_systems_accessing_mal_ip() called")

    fb_other_systems_accessing_mal_ip = phantom.get_format_data(name="fb_other_systems_accessing_mal_ip")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_other_systems_accessing_mal_ip, note_format="html", title="Other system accessing the malicious IP")

    return


@phantom.playbook_block()
def api_note_other_system_acces_malicious_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_other_system_acces_malicious_ip() called")

    fb_note_other_systems_acces_malicious_ip = phantom.get_format_data(name="fb_note_other_systems_acces_malicious_ip")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_note_other_systems_acces_malicious_ip, note_format="html", title="Other Systems Communicating with the malicious IP")

    return


@phantom.playbook_block()
def fb_spl_other_systems_access_malicious_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_spl_other_systems_access_malicious_ip() called")

    template = """%%\nindex=firewall dest=\"{0}\" earliest=-90d | dedup src | table src\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_list_merge_1:custom_function_result.data.*.item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_spl_other_systems_access_malicious_ip", separator=", ")

    spl_other_systems_access_malicious_ip(container=container)

    return


@phantom.playbook_block()
def cf_mbs_list_merge_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_list_merge_1() called")

    filtered_artifact_0_data_fl_malicious_ip = phantom.collect2(container=container, datapath=["filtered-data:FL_Malicious_IP:condition_1:artifact:*.cef.sourceAddress","filtered-data:FL_Malicious_IP:condition_1:artifact:*.cef.destinationAddress","filtered-data:fl_malicious_ip:condition_1:artifact:*.id"])

    filtered_artifact_0__cef_sourceaddress = [item[0] for item in filtered_artifact_0_data_fl_malicious_ip]
    filtered_artifact_0__cef_destinationaddress = [item[1] for item in filtered_artifact_0_data_fl_malicious_ip]

    parameters = []

    parameters.append({
        "input_1": filtered_artifact_0__cef_sourceaddress,
        "input_2": filtered_artifact_0__cef_destinationaddress,
        "input_3": None,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_mbs_list_merge_1", callback=fb_spl_other_systems_access_malicious_ip)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return