"""
This playbook creates the SIR ticket and adds a ne wartifact tothe container with the number of the SIR ticket.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'decision_2' block
    decision_2(container=container)

    return

@phantom.playbook_block()
def fl_notable_event_artifacts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_notable_event_artifacts() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.cef.event_id", "!=", ""],
            ["added_from_playbook", "!=", "artifact:*.label"]
        ],
        name="fl_notable_event_artifacts:condition_1",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        cf_mbs_notable_events_text_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fb_add_artifact_snow_assigned_to(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_add_artifact_snow_assigned_to() called")

    template = """{{\"snow_assigned_to\": \"svc_csoc_soar\", \"snow_ticket_number\": \"{1}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "container:id",
        "snow_create_sir:action_result.data.*.number"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_add_artifact_snow_assigned_to", separator=", ")

    ph_add_artifact_sir_snow_tcket(container=container)

    return


@phantom.playbook_block()
def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_2() called")

    tags_value = container.get("tags", None)

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.cef.snow_ticket_number", "!=", ""],
            ["sir_testing", "not in", tags_value]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        return

    # check for 'else' condition 2
    fl_notable_event_artifacts(action=action, success=success, container=container, results=results, handle=handle)
    db_is_event_details_artifact_exist(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def fb_container_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_container_notes() called")

    ################################################################################
    # Prettify the notes into a single string.
    ################################################################################

    template = """========== Summary ========== \n%%\n{0}\n{1}\n=====================================\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "http_rest_get_container_notes:action_result.data.*.response_body.data.*.title",
        "http_rest_get_container_notes:action_result.data.*.response_body.data.*.content"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_container_notes", separator=", ")

    fb_snow_sir_ticket_fields(container=container)

    return


@phantom.playbook_block()
def http_rest_get_container_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("http_rest_get_container_notes() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # Make a REST GET call to retrieve all notes from the container.
    ################################################################################

    fb_rest_get_notes_this_container_0 = phantom.get_format_data(name="fb_rest_get_notes_this_container_0")

    parameters = []

    if fb_rest_get_notes_this_container_0 is not None:
        parameters.append({
            "headers": "",
            "location": fb_rest_get_notes_this_container_0,
            "verify_certificate": False,
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get data", parameters=parameters, name="http_rest_get_container_notes", assets=["http test"], callback=fb_container_notes)

    return


@phantom.playbook_block()
def fl_host_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_host_artifact() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["artifact:*.name", "==", "Host Artifact"]
        ],
        name="fl_host_artifact:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_rest_get_notes_this_container_0(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fl_event_details_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_event_details_artifact() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["artifact:*.name", "==", "Event Details Artifact"]
        ],
        name="fl_event_details_artifact:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fl_host_artifact(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fb_rest_get_notes_this_container_0(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_rest_get_notes_this_container_0() called")

    ################################################################################
    # Format the REST endpoint to get all notes from the current container.
    ################################################################################

    template = """/note?_filter_container=\"{0}\"&_filter_title__in=[\"List of Malicious IOCs in the Email\", \"Complete list of recipients of this email\"]&sort=modified_time&order=desc"""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_rest_get_notes_this_container_0", separator=", ")

    http_rest_get_container_notes(container=container)

    return


@phantom.playbook_block()
def db_is_event_details_artifact_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_event_details_artifact_exist() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["artifact:*.name", "==", "Event Details Artifact"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        db_is_host_artifact_exist(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    fb_no_sir_ticket_event_aritfact_missing(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def ph_add_artifact_sir_snow_tcket(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_add_artifact_sir_snow_tcket() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    id_value = container.get("id", None)
    fb_add_artifact_snow_assigned_to = phantom.get_format_data(name="fb_add_artifact_snow_assigned_to")

    parameters = []

    parameters.append({
        "name": "SNOW SIR Ticket",
        "label": "sir_ticket",
        "cef_name": "",
        "contains": "",
        "cef_value": "",
        "container_id": id_value,
        "cef_dictionary": fb_add_artifact_snow_assigned_to,
        "run_automation": False,
        "source_data_identifier": "SANDS_PhishingMail_Document_Playbook",
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("add artifact", parameters=parameters, name="ph_add_artifact_sir_snow_tcket", assets=["phantom"])

    return


@phantom.playbook_block()
def db_is_host_artifact_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_host_artifact_exist() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["artifact:*.name", "==", "Host Artifact"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        fl_event_details_artifact(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    fb_no_sir_ticket_host_aritfact_missing(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def api_no_sir_ticket_host_aritfact_missing(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_no_sir_ticket_host_aritfact_missing() called")

    fb_no_sir_ticket_host_aritfact_missing = phantom.get_format_data(name="fb_no_sir_ticket_host_aritfact_missing")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_no_sir_ticket_host_aritfact_missing, note_format="html", title="Host Artifact Missing - No SIR ticket created")

    return


@phantom.playbook_block()
def api_no_sir_ticket_event_aritfact_missing(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_no_sir_ticket_event_aritfact_missing() called")

    fb_no_sir_ticket_event_aritfact_missing = phantom.get_format_data(name="fb_no_sir_ticket_event_aritfact_missing")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_no_sir_ticket_event_aritfact_missing, note_format="html", title="Event Details Artifact Missing - No SIR ticket created")

    return


@phantom.playbook_block()
def fb_no_sir_ticket_host_aritfact_missing(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_no_sir_ticket_host_aritfact_missing() called")

    template = """Host Artifact doesn't exist in this container. Hence SIR ticket will not be created. Analyst needs to manually action this event."""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_no_sir_ticket_host_aritfact_missing", separator=", ")

    api_no_sir_ticket_host_aritfact_missing(container=container)

    return


@phantom.playbook_block()
def fb_no_sir_ticket_event_aritfact_missing(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_no_sir_ticket_event_aritfact_missing() called")

    template = """Event Details Artifact doesn't exist in this container. Hence SIR ticket will not be created. Analyst needs to manually action this event."""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_no_sir_ticket_event_aritfact_missing", separator=", ")

    api_no_sir_ticket_event_aritfact_missing(container=container)

    return


@phantom.playbook_block()
def cf_mbs_notable_events_text_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_notable_events_text_1() called")

    filtered_artifact_0_data_fl_notable_event_artifacts = phantom.collect2(container=container, datapath=["filtered-data:fl_notable_event_artifacts:condition_1:artifact:*.cef","filtered-data:fl_notable_event_artifacts:condition_1:artifact:*.id"])

    filtered_artifact_0__cef = [item[0] for item in filtered_artifact_0_data_fl_notable_event_artifacts]

    parameters = []

    parameters.append({
        "artifact_cef_list": filtered_artifact_0__cef,
        "exclude_field_list": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/notable_events_text", parameters=parameters, name="cf_mbs_notable_events_text_1", callback=join_snow_create_sir)

    return


@phantom.playbook_block()
def fb_snow_sir_ticket_fields(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_snow_sir_ticket_fields() called")

    template = """{{\"parent\": \"\", \"u_requestor\": \"svc_csoc_soar\", \"category\": \"Access\", \"subcategory\": \"VPN\", \"priority\": \"3\", \"impact\": \"3\",  \"urgency\": \"3\", \"state\": \"-21\", \"contact_type\": \"SIEM\", \"assignment_group\": \"Global CSOC Analysts\", \"assigned_to\": \"\", \"location\": \"{1}\", \"short_description\": \"CSIR - FireEye NX - {2} - {3}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "container:id",
        "filtered-data:FL_Host_Artifact:condition_1:artifact:*.cef.location",
        "filtered-data:FL_Event_Details_Artifact:condition_1:artifact:*.cef.category",
        "filtered-data:FL_Event_Details_Artifact:condition_1:artifact:*.cef.event_date"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_snow_sir_ticket_fields", separator=", ", drop_none=True)

    join_snow_create_sir(container=container)

    return


@phantom.playbook_block()
def join_snow_create_sir(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("join_snow_create_sir() called")

    if phantom.completed(custom_function_names=["cf_mbs_notable_events_text_1"], action_names=["http_rest_get_container_notes"]):
        # call connected block "snow_create_sir"
        snow_create_sir(container=container, handle=handle)

    return


@phantom.playbook_block()
def snow_create_sir(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("snow_create_sir() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    cf_mbs_notable_events_text_1__result = phantom.collect2(container=container, datapath=["cf_mbs_notable_events_text_1:custom_function_result.data.exclude_field_text"])
    fb_snow_sir_ticket_fields = phantom.get_format_data(name="fb_snow_sir_ticket_fields")

    parameters = []

    # build parameters list for 'snow_create_sir' call
    for cf_mbs_notable_events_text_1__result_item in cf_mbs_notable_events_text_1__result:
        parameters.append({
            "table": "incident",
            "fields": fb_snow_sir_ticket_fields,
            "vault_id": "",
            "description": cf_mbs_notable_events_text_1__result_item[0],
            "short_description": "",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("create ticket", parameters=parameters, name="snow_create_sir", assets=["service_now"], callback=fb_add_artifact_snow_assigned_to)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return