"""
This playbook investigates the file hashes present in the email against various tools such as the below and stores the results in the container. \n\n- VirusTotal v3\n- Crowdstrike\n- IntSights\n- AnyRun
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'fl_non_empty_vaultid_original_email' block
    fl_non_empty_vaultid_original_email(container=container)

    return

@phantom.playbook_block()
def format_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_6() called")

    template = """File reputation results against VT.\n\n%%\nHash: {0}\nMalicious Score: {1}\nMessage: {2}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "vt_file_reputation:action_result.parameter.hash",
        "vt_file_reputation:action_result.summary.malicious",
        "vt_file_reputation:action_result.message"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_6", separator=", ")

    api_note_vt_hunt_file_results(container=container)

    return


@phantom.playbook_block()
def vt_get_file(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("vt_get_file() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_non_empty_vaultid_original_email = phantom.collect2(container=container, datapath=["filtered-data:fl_non_empty_vaultid_original_email:condition_1:artifact:*.cef.fileHash","filtered-data:fl_non_empty_vaultid_original_email:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'vt_get_file' call
    for filtered_artifact_0_item_fl_non_empty_vaultid_original_email in filtered_artifact_0_data_fl_non_empty_vaultid_original_email:
        if filtered_artifact_0_item_fl_non_empty_vaultid_original_email[0] is not None:
            parameters.append({
                "hash": filtered_artifact_0_item_fl_non_empty_vaultid_original_email[0],
                "context": {'artifact_id': filtered_artifact_0_item_fl_non_empty_vaultid_original_email[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get file", parameters=parameters, name="vt_get_file", assets=["virustotal prod v3"], callback=filter_5)

    return


@phantom.playbook_block()
def fl_non_empty_vaultid_original_email(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_non_empty_vaultid_original_email() called")

    ################################################################################
    # Filter non empty FileHashes and Original Email artifacts.
    ################################################################################

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.cef.fileHash", "!=", ""],
            ["previously_processed", "not in", "artifact:*.tags"],
            ["added_from_playbook", "==", "artifact:*.label"]
        ],
        name="fl_non_empty_vaultid_original_email:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_cs_file_query(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)
        intsights_hunt_file(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)
        vt_file_reputation(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)
        vt_get_file(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fl_intsights_severity_high_filehash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_intsights_severity_high_filehash() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["intsights_hunt_file:action_result.data.*.Severity.Value", "==", "High"]
        ],
        name="fl_intsights_severity_high_filehash:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        api_malicious_artifact_tag_file_intsight(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def vt_file_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("vt_file_reputation() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # Check fILE reputation against Virus Total.
    ################################################################################

    filtered_artifact_0_data_fl_non_empty_vaultid_original_email = phantom.collect2(container=container, datapath=["filtered-data:FL_Non_Empty_VaultID_Original_Email:condition_1:artifact:*.cef.requestURL","filtered-data:fl_non_empty_vaultid_original_email:condition_1:artifact:*.cef.fileHash","filtered-data:FL_Non_Empty_VaultID_Original_Email:condition_1:artifact:*.cef.sourceDnsDomain","filtered-data:fl_non_empty_vaultid_original_email:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'vt_file_reputation' call
    for filtered_artifact_0_item_fl_non_empty_vaultid_original_email in filtered_artifact_0_data_fl_non_empty_vaultid_original_email:
        if filtered_artifact_0_item_fl_non_empty_vaultid_original_email[1] is not None:
            parameters.append({
                "url": filtered_artifact_0_item_fl_non_empty_vaultid_original_email[0],
                "hash": filtered_artifact_0_item_fl_non_empty_vaultid_original_email[1],
                "domain": filtered_artifact_0_item_fl_non_empty_vaultid_original_email[2],
                "context": {'artifact_id': filtered_artifact_0_item_fl_non_empty_vaultid_original_email[3]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("file reputation", parameters=parameters, name="vt_file_reputation", assets=["virustotal prod v3"], callback=format_6)

    return


@phantom.playbook_block()
def api_note_intsights_hunt_file_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_intsights_hunt_file_results() called")

    format_8 = phantom.get_format_data(name="format_8")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=format_8, note_format="html", title="INTSIGHTS Hunt File Results")

    fl_intsights_severity_high_filehash(container=container)

    return


@phantom.playbook_block()
def api_malicious_artifact_tag_file_intsight(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_malicious_artifact_tag_file_intsight() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_result_0_data_fl_intsights_severity_high_filehash = phantom.collect2(container=container, datapath=["filtered-data:fl_intsights_severity_high_filehash:condition_1:intsights_hunt_file:action_result.parameter.context.artifact_id"])

    parameters = []

    # build parameters list for 'api_malicious_artifact_tag_file_intsight' call
    for filtered_result_0_item_fl_intsights_severity_high_filehash in filtered_result_0_data_fl_intsights_severity_high_filehash:
        if filtered_result_0_item_fl_intsights_severity_high_filehash[0] is not None:
            parameters.append({
                "add_tags": "malicious",
                "artifact_id": filtered_result_0_item_fl_intsights_severity_high_filehash[0],
                "remove_tags": "",
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="api_malicious_artifact_tag_file_intsight", assets=["phantom"])

    return


@phantom.playbook_block()
def api_malicious_artifact_tag_file_vt(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_malicious_artifact_tag_file_vt() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_result_0_data_fl_vt_filehash_malicious_results = phantom.collect2(container=container, datapath=["filtered-data:FL_VT_FileHash_Malicious_Results:condition_1:vt_file_reputation:action_result.parameter.context.artifact_id"])

    parameters = []

    # build parameters list for 'api_malicious_artifact_tag_file_vt' call
    for filtered_result_0_item_fl_vt_filehash_malicious_results in filtered_result_0_data_fl_vt_filehash_malicious_results:
        if filtered_result_0_item_fl_vt_filehash_malicious_results[0] is not None:
            parameters.append({
                "add_tags": "malicious",
                "artifact_id": filtered_result_0_item_fl_vt_filehash_malicious_results[0],
                "remove_tags": "",
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="api_malicious_artifact_tag_file_vt", assets=["phantom"])

    return


@phantom.playbook_block()
def update_artifact_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_2() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_result_0_data_filter_5 = phantom.collect2(container=container, datapath=["filtered-data:filter_5:condition_1:vt_get_file:action_result.parameter.context.artifact_id"])

    parameters = []

    # build parameters list for 'update_artifact_2' call
    for filtered_result_0_item_filter_5 in filtered_result_0_data_filter_5:
        if filtered_result_0_item_filter_5[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": "{\"get_file_success\": \"true\"}",
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_result_0_item_filter_5[0],
                "artifact_json": "",
                "cef_types_json": "",
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_2", assets=["phantom"])

    return


@phantom.playbook_block()
def update_artifact_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_result_0_data_filter_5 = phantom.collect2(container=container, datapath=["filtered-data:filter_5:condition_2:vt_get_file:action_result.parameter.context.artifact_id"])

    parameters = []

    # build parameters list for 'update_artifact_1' call
    for filtered_result_0_item_filter_5 in filtered_result_0_data_filter_5:
        if filtered_result_0_item_filter_5[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": "{\"get_file_success\": \"false\"}",
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_result_0_item_filter_5[0],
                "artifact_json": "",
                "cef_types_json": "",
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_1", assets=["phantom"])

    return


@phantom.playbook_block()
def filter_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_5() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["vt_get_file:action_result.status", "==", "success"]
        ],
        name="filter_5:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        update_artifact_2(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    # collect filtered artifact ids and results for 'if' condition 2
    matched_artifacts_2, matched_results_2 = phantom.condition(
        container=container,
        conditions=[
            ["vt_get_file:action_result.status", "!=", "success"]
        ],
        name="filter_5:condition_2",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_2 or matched_results_2:
        update_artifact_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)

    return


@phantom.playbook_block()
def fl_vt_filehash_malicious_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_vt_filehash_malicious_results() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["vt_file_reputation:action_result.summary.malicious", ">=", 1]
        ],
        name="fl_vt_filehash_malicious_results:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        api_malicious_artifact_tag_file_vt(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def intsights_hunt_file(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("intsights_hunt_file() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # hunt file against INTSIGHTS.
    ################################################################################

    filtered_artifact_0_data_fl_non_empty_vaultid_original_email = phantom.collect2(container=container, datapath=["filtered-data:fl_non_empty_vaultid_original_email:condition_1:artifact:*.cef.fileHash","filtered-data:fl_non_empty_vaultid_original_email:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'intsights_hunt_file' call
    for filtered_artifact_0_item_fl_non_empty_vaultid_original_email in filtered_artifact_0_data_fl_non_empty_vaultid_original_email:
        if filtered_artifact_0_item_fl_non_empty_vaultid_original_email[0] is not None:
            parameters.append({
                "hash": filtered_artifact_0_item_fl_non_empty_vaultid_original_email[0],
                "context": {'artifact_id': filtered_artifact_0_item_fl_non_empty_vaultid_original_email[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("hunt file", parameters=parameters, name="intsights_hunt_file", assets=["intsights prod"], callback=format_8)

    return


@phantom.playbook_block()
def http_cs_file_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("http_cs_file_query() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_cs_file_query__as_list = phantom.get_format_data(name="fb_cs_file_query__as_list")
    fb_cs_file_query = phantom.get_format_data(name="fb_cs_file_query")

    parameters = []

    # build parameters list for 'http_cs_file_query' call
    for fb_cs_file_query__item in fb_cs_file_query__as_list:
        if fb_cs_file_query is not None:
            parameters.append({
                "query": fb_cs_file_query__item,
                "command": "search",
                "display": "",
                "headers": "",
                "location": fb_cs_file_query,
                "parse_only": "",
                "verify_certificate": False,
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get data", parameters=parameters, name="http_cs_file_query", assets=["crowdstrike http"], callback=fl_cs_events_non_null_filehash)

    return


@phantom.playbook_block()
def fb_cs_file_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_cs_file_query() called")

    template = """intel/combined/indicators/v1?q={0}"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_Non_Empty_VaultID_Original_Email:condition_1:artifact:*.cef.fileHash"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_cs_file_query", separator=", ")

    http_cs_file_query(container=container)

    return


@phantom.playbook_block()
def format_8(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_8() called")

    template = """File reputation results against INTSIGHTS.\n\n%%\nHash: {0}\nSeverity Value: {1}\nMessage: {2}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "intsights_hunt_file:action_result.data.*.Value",
        "intsights_hunt_file:action_result.data.*.Severity.Value",
        "intsights_hunt_file:action_result.message"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_8", separator=", ")

    api_note_intsights_hunt_file_results(container=container)

    return


@phantom.playbook_block()
def fl_cs_events_non_null_filehash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_cs_events_non_null_filehash() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["http_cs_file_query:action_result.data.*.response_body.meta.pagination.total", ">", 0]
        ],
        name="fl_cs_events_non_null_filehash:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_file_analysis_notes(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def api_note_vt_hunt_file_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_vt_hunt_file_results() called")

    format_6 = phantom.get_format_data(name="format_6")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=format_6, note_format="html", title="Virus Total File Reputation Results")

    fl_vt_filehash_malicious_results(container=container)

    return


@phantom.playbook_block()
def fb_file_analysis_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_file_analysis_notes() called")

    ################################################################################
    # Prepare notes for the analyst from the File investigation results
    ################################################################################

    template = """File Hash investigation Results as below.\n\n%%\nHash: {0}\nHash Type: {1}\nMalicious Confidence: {2}\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:fl_cs_events_non_null_filehash:condition_1:http_cs_file_query:action_result.data.*.response_body.resources.*.indicator",
        "filtered-data:fl_cs_events_non_null_filehash:condition_1:http_cs_file_query:action_result.data.*.response_body.resources.*.type",
        "filtered-data:fl_cs_events_non_null_filehash:condition_1:http_cs_file_query:action_result.data.*.response_body.resources.*.malicious_confidence"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_file_analysis_notes", separator=", ")

    api_note_file_analysis(container=container)

    return


@phantom.playbook_block()
def api_note_file_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_file_analysis() called")

    ################################################################################
    # Add a note with the file analysis results.
    ################################################################################

    fb_file_analysis_notes = phantom.get_format_data(name="fb_file_analysis_notes")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_file_analysis_notes, note_format="html", title="File Investigation Results")

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return