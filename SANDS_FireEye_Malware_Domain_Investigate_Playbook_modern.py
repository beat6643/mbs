"""
This playbook investigates the IOCs present in the email against various tools such as the below and stores the results in the container\n\n- VirusTotal v3\n- Crowdstrike\n- IntSights\n- URLscan.io\n- DNS
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'fl_non_internal_domains' block
    fl_non_internal_domains(container=container)

    return

@phantom.playbook_block()
def fl_is_domain_malicious_intsights(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_is_domain_malicious_intsights() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["filtered-data:FL_INTSIGHTS_Success:condition_1:intsights_hunt_sourcedomain:action_result.data.*.Severity.Value", "==", "High"],
            ["filtered-data:FL_INTSIGHTS_Success:condition_1:intsights_hunt_sourcedomain:action_result.data.*.Severity.Value", "!=", ""]
        ],
        name="fl_is_domain_malicious_intsights:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        filter_15(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def filter_15(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_15() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["filtered-data:FL_Is_Domain_Malicious_INTSIGHTS:condition_1:intsights_hunt_sourcedomain:action_result.data.*.Value", "==", "filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.destinationDnsDomain"],
            ["filtered-data:FL_Is_Domain_Malicious_INTSIGHTS:condition_1:intsights_hunt_sourcedomain:action_result.data.*.Value", "==", "filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.sourceDnsDomain"],
            ["filtered-data:FL_Is_Domain_Malicious_INTSIGHTS:condition_1:intsights_hunt_sourcedomain:action_result.data.*.Value", "==", "filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.email_sender_domain"]
        ],
        name="filter_15:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        ph_update_artifact_intsights_domain_mal(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fb_intsights_domain_reputation_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_intsights_domain_reputation_results() called")

    template = """%%\nDomain: {0}\nSeverity Value: {1}\nMessage: {2}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "intsights_hunt_sourcedomain:action_result.data.*.Value",
        "intsights_hunt_sourcedomain:action_result.data.*.Severity.Value",
        "intsights_hunt_sourcedomain:action_result.message"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_intsights_domain_reputation_results", separator=", ")

    api_note_intsights_dom_rep_results(container=container)

    return


@phantom.playbook_block()
def fb_vt_domain_reputation_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_vt_domain_reputation_results() called")

    template = """%%\nDomain: {0}\nMalicious Score: {1}\nMessage: {2}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "vt_sourcedomain_reputation:action_result.parameter.domain",
        "vt_sourcedomain_reputation:action_result.summary.malicious",
        "vt_sourcedomain_reputation:action_result.message"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_vt_domain_reputation_results", separator=", ")

    api_note_vt_domain_reputation_results(container=container)

    return


@phantom.playbook_block()
def filter_18(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_18() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["vt_sourcedomain_reputation:action_result.status", "!=", "failed"]
        ],
        name="filter_18:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_update_artifact_vt_domain(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fl_intsights_success(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_intsights_success() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["intsights_hunt_sourcedomain:action_result.status", "==", "success"]
        ],
        name="fl_intsights_success:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_update_artifact_intsight_domain(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def vt_sourcedomain_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("vt_sourcedomain_reputation() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # Check Domain reputation against Virus Total.
    ################################################################################

    cf_mbs_list_merge_1_data = phantom.collect2(container=container, datapath=["cf_mbs_list_merge_1:custom_function_result.data.*.item"])

    parameters = []

    # build parameters list for 'vt_sourcedomain_reputation' call
    for cf_mbs_list_merge_1_data_item in cf_mbs_list_merge_1_data:
        if cf_mbs_list_merge_1_data_item[0] is not None:
            parameters.append({
                "domain": cf_mbs_list_merge_1_data_item[0],
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("domain reputation", parameters=parameters, name="vt_sourcedomain_reputation", assets=["virustotal prod v3"], callback=fb_vt_domain_reputation_results)

    return


@phantom.playbook_block()
def intsights_hunt_sourcedomain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("intsights_hunt_sourcedomain() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # Hunt Domain against INTSIGHTS.
    ################################################################################

    cf_mbs_list_merge_1_data = phantom.collect2(container=container, datapath=["cf_mbs_list_merge_1:custom_function_result.data.*.item"])

    parameters = []

    # build parameters list for 'intsights_hunt_sourcedomain' call
    for cf_mbs_list_merge_1_data_item in cf_mbs_list_merge_1_data:
        if cf_mbs_list_merge_1_data_item[0] is not None:
            parameters.append({
                "domain": cf_mbs_list_merge_1_data_item[0],
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("hunt domain", parameters=parameters, name="intsights_hunt_sourcedomain", assets=["intsights prod"], callback=fb_intsights_domain_reputation_results)

    return


@phantom.playbook_block()
def api_note_vt_domain_reputation_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_vt_domain_reputation_results() called")

    fb_vt_domain_reputation_results = phantom.get_format_data(name="fb_vt_domain_reputation_results")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_vt_domain_reputation_results, note_format="html", title="VT Domain Reputation Results")

    filter_18(container=container)

    return


@phantom.playbook_block()
def api_note_intsights_dom_rep_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_intsights_dom_rep_results() called")

    fb_intsights_domain_reputation_results = phantom.get_format_data(name="fb_intsights_domain_reputation_results")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_intsights_domain_reputation_results, note_format="html", title="INTSIGHTS Domain Reputation Results")

    fl_intsights_success(container=container)

    return


@phantom.playbook_block()
def fb_update_artifact_intsight_domain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_update_artifact_intsight_domain() called")

    template = """%%\n{{\"severity_value\": \"{0}\"}}\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:fl_intsights_success:condition_1:intsights_hunt_sourcedomain:action_result.data.*.severity.value"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_update_artifact_intsight_domain", separator=", ")

    update_artifact_3(container=container)

    return


@phantom.playbook_block()
def fb_update_artifact_vt_domain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_update_artifact_vt_domain() called")

    template = """%%\n{{\"vt_result\": \"{0}\"}}\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:filter_18:condition_1:vt_sourcedomain_reputation:action_result.summary.malicious"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_update_artifact_vt_domain", separator=", ")

    update_artifact_2(container=container)

    return


@phantom.playbook_block()
def ph_update_artifact_intsights_domain_mal(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_intsights_domain_mal() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_filter_15 = phantom.collect2(container=container, datapath=["filtered-data:filter_15:condition_1:artifact:*.id","filtered-data:filter_15:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'ph_update_artifact_intsights_domain_mal' call
    for filtered_artifact_0_item_filter_15 in filtered_artifact_0_data_filter_15:
        if filtered_artifact_0_item_filter_15[0] is not None:
            parameters.append({
                "add_tags": "malicious",
                "artifact_id": filtered_artifact_0_item_filter_15[0],
                "remove_tags": "",
                "context": {'artifact_id': filtered_artifact_0_item_filter_15[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="ph_update_artifact_intsights_domain_mal", assets=["phantom"])

    return


@phantom.playbook_block()
def fl_is_domain_malicious_vt(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_is_domain_malicious_vt() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["vt_sourcedomain_reputation:action_result.summary.malicious", ">=", 1]
        ],
        name="fl_is_domain_malicious_vt:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        filter_14(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def update_artifact_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_2() called")

    vt_sourcedomain_reputation_result_data = phantom.collect2(container=container, datapath=["vt_sourcedomain_reputation:action_result.parameter.context.artifact_id","vt_sourcedomain_reputation:action_result.parameter.context.artifact_id"], action_results=results)
    fb_update_artifact_vt_domain = phantom.get_format_data(name="fb_update_artifact_vt_domain")

    vt_sourcedomain_reputation_parameter_context_artifact_id = [item[0] for item in vt_sourcedomain_reputation_result_data]

    parameters = []

    parameters.append({
        "artifact_id_list": vt_sourcedomain_reputation_parameter_context_artifact_id,
        "new_cef_json_list": fb_update_artifact_vt_domain,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/update_artifact", parameters=parameters, name="update_artifact_2", callback=fl_is_domain_malicious_vt)

    return


@phantom.playbook_block()
def update_artifact_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_3() called")

    filtered_result_0_data_fl_intsights_success = phantom.collect2(container=container, datapath=["filtered-data:FL_INTSIGHTS_Success:condition_1:intsights_hunt_sourcedomain:action_result.parameter.context.artifact_id"])
    fb_update_artifact_intsight_domain = phantom.get_format_data(name="fb_update_artifact_intsight_domain")

    filtered_result_0_parameter_context_artifact_id = [item[0] for item in filtered_result_0_data_fl_intsights_success]

    parameters = []

    parameters.append({
        "artifact_id_list": filtered_result_0_parameter_context_artifact_id,
        "new_cef_json_list": fb_update_artifact_intsight_domain,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/update_artifact", parameters=parameters, name="update_artifact_3", callback=fl_is_domain_malicious_intsights)

    return


@phantom.playbook_block()
def http_cs_query_domain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("http_cs_query_domain() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_cs_domain_query__as_list = phantom.get_format_data(name="fb_cs_domain_query__as_list")
    fb_cs_domain_query = phantom.get_format_data(name="fb_cs_domain_query")

    parameters = []

    # build parameters list for 'http_cs_query_domain' call
    for fb_cs_domain_query__item in fb_cs_domain_query__as_list:
        if fb_cs_domain_query is not None:
            parameters.append({
                "query": fb_cs_domain_query__item,
                "command": "search",
                "display": "",
                "headers": "",
                "location": fb_cs_domain_query,
                "parse_only": "",
                "verify_certificate": False,
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get data", parameters=parameters, name="http_cs_query_domain", assets=["crowdstrike http"], callback=fl_cs_result)

    return


@phantom.playbook_block()
def cf_mbs_parse_crowdstrike_ioc_api_results_modified(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_parse_crowdstrike_ioc_api_results_modified() called")

    filtered_result_0_data_fl_cs_result = phantom.collect2(container=container, datapath=["filtered-data:fl_cs_result:condition_1:http_cs_query_domain:action_result.data.*.parsed_response_body"])

    parameters = []

    # build parameters list for 'cf_mbs_parse_crowdstrike_ioc_api_results_modified' call
    for filtered_result_0_item_fl_cs_result in filtered_result_0_data_fl_cs_result:
        parameters.append({
            "crowdstrike_parsed_response_body": filtered_result_0_item_fl_cs_result[0],
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/parse_crowdstrike_ioc_api_results_modified", parameters=parameters, name="cf_mbs_parse_crowdstrike_ioc_api_results_modified", callback=fb_api_note_cs_domain_reputation)

    return


@phantom.playbook_block()
def fl_cs_result(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_cs_result() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["http_cs_query_domain:action_result.data.*.response_body.meta.pagination.total", ">", 0]
        ],
        name="fl_cs_result:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        cf_mbs_parse_crowdstrike_ioc_api_results_modified(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fb_api_note_cs_domain_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_api_note_cs_domain_reputation() called")

    template = """Domain investigation Results as below.\n\n%%\n{0}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_parse_crowdstrike_ioc_api_results_modified:custom_function_result.data.results"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_api_note_cs_domain_reputation", separator=", ")

    api_note_cs_domain_reputation_results(container=container)

    return


@phantom.playbook_block()
def api_note_cs_domain_reputation_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_cs_domain_reputation_results() called")

    fb_api_note_cs_domain_reputation = phantom.get_format_data(name="fb_api_note_cs_domain_reputation")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_api_note_cs_domain_reputation, note_format="html", title="Crowdstrike Intel Domain Reputation Results")

    filter_17(container=container)

    return


@phantom.playbook_block()
def filter_17(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_17() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.destinationDnsDomain", "in", "filtered-data:FL_CS_Result:condition_1:http_cs_query_domain:action_result.data.*.response_body.resources.*.id"],
            ["filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.sourceDnsDomain", "in", "filtered-data:FL_CS_Result:condition_1:http_cs_query_domain:action_result.data.*.response_body.resources.*.id"],
            ["filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.email_sender_domain", "in", "filtered-data:FL_CS_Result:condition_1:http_cs_query_domain:action_result.data.*.response_body.resources.*.id"]
        ],
        name="filter_17:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        api_add_tag_malicious_cs_domain(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def api_add_tag_malicious_cs_domain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_add_tag_malicious_cs_domain() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_filter_17 = phantom.collect2(container=container, datapath=["filtered-data:filter_17:condition_1:artifact:*.id","filtered-data:filter_17:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'api_add_tag_malicious_cs_domain' call
    for filtered_artifact_0_item_filter_17 in filtered_artifact_0_data_filter_17:
        if filtered_artifact_0_item_filter_17[0] is not None:
            parameters.append({
                "add_tags": "malicious",
                "artifact_id": filtered_artifact_0_item_filter_17[0],
                "remove_tags": "",
                "context": {'artifact_id': filtered_artifact_0_item_filter_17[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="api_add_tag_malicious_cs_domain", assets=["phantom"])

    return


@phantom.playbook_block()
def ph_update_artifact_vt_domain_malicious(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_vt_domain_malicious() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_filter_14 = phantom.collect2(container=container, datapath=["filtered-data:filter_14:condition_1:artifact:*.id","filtered-data:filter_14:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'ph_update_artifact_vt_domain_malicious' call
    for filtered_artifact_0_item_filter_14 in filtered_artifact_0_data_filter_14:
        if filtered_artifact_0_item_filter_14[0] is not None:
            parameters.append({
                "add_tags": "malicious",
                "artifact_id": filtered_artifact_0_item_filter_14[0],
                "remove_tags": "",
                "context": {'artifact_id': filtered_artifact_0_item_filter_14[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="ph_update_artifact_vt_domain_malicious", assets=["phantom"])

    return


@phantom.playbook_block()
def db_is_domain_list_empty(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_domain_list_empty() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_mbs_list_merge_1:custom_function_result.data.*.item", "!=", ""]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        intsights_hunt_sourcedomain(action=action, success=success, container=container, results=results, handle=handle)
        fb_cs_domain_query(action=action, success=success, container=container, results=results, handle=handle)
        vt_sourcedomain_reputation(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def fl_non_internal_domains(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_non_internal_domains() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["whitelisted_domain", "not in", "artifact:*.tags"],
            ["previously_processed", "not in", "artifact:*.tags"],
            ["added_from_playbook", "==", "artifact:*.label"]
        ],
        name="fl_non_internal_domains:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        cf_mbs_list_merge_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fb_cs_domain_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_cs_domain_query() called")

    template = """intel/combined/indicators/v1?q={0}"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_list_merge_1:custom_function_result.data.*.item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_cs_domain_query", separator=", ")

    http_cs_query_domain(container=container)

    return


@phantom.playbook_block()
def cf_mbs_list_merge_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_list_merge_1() called")

    filtered_artifact_0_data_fl_non_internal_domains = phantom.collect2(container=container, datapath=["filtered-data:fl_non_internal_domains:condition_1:artifact:*.cef.destinationDnsDomain","filtered-data:fl_non_internal_domains:condition_1:artifact:*.cef.sourceDnsDomain","filtered-data:fl_non_internal_domains:condition_1:artifact:*.cef.email_sender_domain","filtered-data:fl_non_internal_domains:condition_1:artifact:*.id"])

    filtered_artifact_0__cef_destinationdnsdomain = [item[0] for item in filtered_artifact_0_data_fl_non_internal_domains]
    filtered_artifact_0__cef_sourcednsdomain = [item[1] for item in filtered_artifact_0_data_fl_non_internal_domains]
    filtered_artifact_0__cef_email_sender_domain = [item[2] for item in filtered_artifact_0_data_fl_non_internal_domains]

    parameters = []

    parameters.append({
        "input_1": filtered_artifact_0__cef_destinationdnsdomain,
        "input_2": filtered_artifact_0__cef_sourcednsdomain,
        "input_3": filtered_artifact_0__cef_email_sender_domain,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_mbs_list_merge_1", callback=db_is_domain_list_empty)

    return


@phantom.playbook_block()
def filter_14(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_14() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["filtered-data:FL_Is_Domain_Malicious_VT:condition_1:vt_sourcedomain_reputation:action_result.parameter.domain", "==", "filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.destinationDnsDomain"],
            ["filtered-data:FL_Is_Domain_Malicious_VT:condition_1:vt_sourcedomain_reputation:action_result.parameter.domain", "==", "filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.sourceDnsDomain"],
            ["filtered-data:FL_Is_Domain_Malicious_VT:condition_1:vt_sourcedomain_reputation:action_result.parameter.domain", "==", "filtered-data:FL_Non_Internal_Domains:condition_1:artifact:*.cef.email_sender_domain"]
        ],
        name="filter_14:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        ph_update_artifact_vt_domain_malicious(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return