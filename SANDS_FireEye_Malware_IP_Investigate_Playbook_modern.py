"""
This playbook investigates the IOCs present in the email against various tools such as the below and stores the results in the container. It also searches for other users that recieved the same email and adds them to the note and creates a ne wartifact for each email recipient.\n\n- VirusTotal v3\n- Crowdstrike\n- IntSights
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'filter_4' block
    filter_4(container=container)

    return

@phantom.playbook_block()
def filter_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_4() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["artifact:*.cef.sourceAddress", "!=", ""],
            ["artifact:*.cef.destinationAddress", "!=", ""]
        ],
        name="filter_4:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fl_source_dest_addresses(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def ph_malicious_artifact_tag_ip_ints(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_malicious_artifact_tag_ip_ints() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_filter_5 = phantom.collect2(container=container, datapath=["filtered-data:filter_5:condition_1:artifact:*.id","filtered-data:filter_5:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'ph_malicious_artifact_tag_ip_ints' call
    for filtered_artifact_0_item_filter_5 in filtered_artifact_0_data_filter_5:
        if filtered_artifact_0_item_filter_5[0] is not None:
            parameters.append({
                "add_tags": "malicious",
                "artifact_id": filtered_artifact_0_item_filter_5[0],
                "remove_tags": "",
                "context": {'artifact_id': filtered_artifact_0_item_filter_5[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="ph_malicious_artifact_tag_ip_ints", assets=["phantom"])

    return


@phantom.playbook_block()
def filter_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_5() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["filtered-data:FL_INTSIGHTS_Malicious_Action_Results:condition_1:intsights_hunt_ip:action_result.data.*.Value", "==", "filtered-data:FL_source_dest_Addresses:condition_1:artifact:*.cef.sourceAddress"],
            ["filtered-data:FL_INTSIGHTS_Malicious_Action_Results:condition_1:intsights_hunt_ip:action_result.data.*.Value", "==", "filtered-data:FL_source_dest_Addresses:condition_1:artifact:*.cef.destinationAddress"]
        ],
        name="filter_5:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        ph_malicious_artifact_tag_ip_ints(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def api_note_intsights_sender_ip_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_intsights_sender_ip_results() called")

    fb_note_intsights_hunt_sender_ip_results = phantom.get_format_data(name="fb_note_intsights_hunt_sender_ip_results")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_note_intsights_hunt_sender_ip_results, note_format="html", title="INTSIGHTS IP Investigation Results")

    fl_intsights_malicious_action_results(container=container)

    return


@phantom.playbook_block()
def fb_note_vt_ip_reputation_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_note_vt_ip_reputation_results() called")

    template = """File reputation results against VT.\n\n%%\nIP: {0}\nMalicious Score: {1}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "vt_ip_reputation:action_result.parameter.ip",
        "vt_ip_reputation:action_result.summary.malicious"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_note_vt_ip_reputation_results", separator=", ")

    api_note_vt_ip_reputation_results(container=container)

    return


@phantom.playbook_block()
def filter_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_6() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["filtered-data:FL_VT_Malicious_Action_Results:condition_1:vt_ip_reputation:action_result.parameter.ip", "==", "filtered-data:FL_source_dest_Addresses:condition_1:artifact:*.cef.sourceAddress"],
            ["filtered-data:FL_VT_Malicious_Action_Results:condition_1:vt_ip_reputation:action_result.parameter.ip", "==", "filtered-data:FL_source_dest_Addresses:condition_1:artifact:*.cef.sourceAddress"]
        ],
        name="filter_6:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        api_malicious_artifact_tag_ip_vt(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def api_note_vt_ip_reputation_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_vt_ip_reputation_results() called")

    fb_note_vt_ip_reputation_results = phantom.get_format_data(name="fb_note_vt_ip_reputation_results")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_note_vt_ip_reputation_results, note_format="html", title="VirusTotal IP Investigation Results")

    fl_vt_malicious_action_results(container=container)

    return


@phantom.playbook_block()
def api_malicious_artifact_tag_ip_vt(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_malicious_artifact_tag_ip_vt() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_filter_6 = phantom.collect2(container=container, datapath=["filtered-data:filter_6:condition_1:artifact:*.id","filtered-data:filter_6:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'api_malicious_artifact_tag_ip_vt' call
    for filtered_artifact_0_item_filter_6 in filtered_artifact_0_data_filter_6:
        if filtered_artifact_0_item_filter_6[0] is not None:
            parameters.append({
                "add_tags": "malicious",
                "artifact_id": filtered_artifact_0_item_filter_6[0],
                "remove_tags": "",
                "context": {'artifact_id': filtered_artifact_0_item_filter_6[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="api_malicious_artifact_tag_ip_vt", assets=["phantom"])

    return


@phantom.playbook_block()
def fb_note_intsights_hunt_sender_ip_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_note_intsights_hunt_sender_ip_results() called")

    template = """File reputation results against INTSIGHTS.\n\n%%\nIP: {0}\nSeverity Value: {1}\nSeverity Value: {2}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "intsights_hunt_ip:action_result.data.*.Value",
        "intsights_hunt_ip:action_result.data.*.Severity.Value",
        "intsights_hunt_ip:action_result.message"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_note_intsights_hunt_sender_ip_results", separator=", ")

    api_note_intsights_sender_ip_results(container=container)

    return


@phantom.playbook_block()
def intsights_hunt_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("intsights_hunt_ip() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # hunt file against INTSIGHTS.
    ################################################################################

    cf_mbs_list_merge_1_data = phantom.collect2(container=container, datapath=["cf_mbs_list_merge_1:custom_function_result.data.*.item"])

    parameters = []

    # build parameters list for 'intsights_hunt_ip' call
    for cf_mbs_list_merge_1_data_item in cf_mbs_list_merge_1_data:
        if cf_mbs_list_merge_1_data_item[0] is not None:
            parameters.append({
                "ip": cf_mbs_list_merge_1_data_item[0],
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("hunt ip", parameters=parameters, name="intsights_hunt_ip", assets=["intsights prod"], callback=fb_note_intsights_hunt_sender_ip_results)

    return


@phantom.playbook_block()
def fl_intsights_malicious_action_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_intsights_malicious_action_results() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["intsights_hunt_ip:action_result.data.*.Severity.Value", "==", "High"]
        ],
        name="fl_intsights_malicious_action_results:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        filter_5(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def vt_ip_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("vt_ip_reputation() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    ################################################################################
    # Check IP reputation against Virus Total.
    ################################################################################

    cf_mbs_list_merge_1_data = phantom.collect2(container=container, datapath=["cf_mbs_list_merge_1:custom_function_result.data.*.item"])
    filtered_artifact_0_data_fl_source_dest_addresses = phantom.collect2(container=container, datapath=["filtered-data:FL_source_dest_Addresses:condition_1:artifact:*.cef.requestURL","filtered-data:FL_source_dest_Addresses:condition_1:artifact:*.cef.vaultId","filtered-data:FL_source_dest_Addresses:condition_1:artifact:*.cef.sourceDnsDomain","filtered-data:fl_source_dest_addresses:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'vt_ip_reputation' call
    for cf_mbs_list_merge_1_data_item in cf_mbs_list_merge_1_data:
        for filtered_artifact_0_item_fl_source_dest_addresses in filtered_artifact_0_data_fl_source_dest_addresses:
            if cf_mbs_list_merge_1_data_item[0] is not None:
                parameters.append({
                    "ip": cf_mbs_list_merge_1_data_item[0],
                    "url": filtered_artifact_0_item_fl_source_dest_addresses[0],
                    "hash": filtered_artifact_0_item_fl_source_dest_addresses[1],
                    "domain": filtered_artifact_0_item_fl_source_dest_addresses[2],
                    "context": {'artifact_id': filtered_artifact_0_item_fl_source_dest_addresses[3]},
                })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("ip reputation", parameters=parameters, name="vt_ip_reputation", assets=["virustotal prod v3"], callback=fb_note_vt_ip_reputation_results)

    return


@phantom.playbook_block()
def fl_vt_malicious_action_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_vt_malicious_action_results() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["vt_ip_reputation:action_result.summary.malicious", ">=", 1]
        ],
        name="fl_vt_malicious_action_results:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        filter_6(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fb_cs_sender_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_cs_sender_ip() called")

    template = """intel/combined/indicators/v1?q={0}"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_list_merge_1:custom_function_result.data.*.item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_cs_sender_ip", separator=", ")

    http_cs_query_ip(container=container)

    return


@phantom.playbook_block()
def http_cs_query_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("http_cs_query_ip() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_cs_sender_ip__as_list = phantom.get_format_data(name="fb_cs_sender_ip__as_list")
    fb_cs_sender_ip = phantom.get_format_data(name="fb_cs_sender_ip")

    parameters = []

    # build parameters list for 'http_cs_query_ip' call
    for fb_cs_sender_ip__item in fb_cs_sender_ip__as_list:
        if fb_cs_sender_ip is not None:
            parameters.append({
                "query": fb_cs_sender_ip__item,
                "command": "search",
                "display": "",
                "headers": "",
                "location": fb_cs_sender_ip,
                "parse_only": "",
                "verify_certificate": False,
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("get data", parameters=parameters, name="http_cs_query_ip", assets=["crowdstrike http"], callback=decision_1)

    return


@phantom.playbook_block()
def fb_note_cs_hunt_ip_no_data(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_note_cs_hunt_ip_no_data() called")

    template = """No CrowdStrike data has been found for the below IP(s)\n\n%%\n {0}\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_list_merge_1:custom_function_result.data.*.item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_note_cs_hunt_ip_no_data", separator=", ")

    api_note_cs_hunt_ip_no_data(container=container)

    return


@phantom.playbook_block()
def cf_mbs_parse_crowdstrike_ioc_api_results_modified(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_parse_crowdstrike_ioc_api_results_modified() called")

    http_cs_query_ip_result_data = phantom.collect2(container=container, datapath=["http_cs_query_ip:action_result.data.*.parsed_response_body","http_cs_query_ip:action_result.parameter.context.artifact_id"], action_results=results)

    parameters = []

    # build parameters list for 'cf_mbs_parse_crowdstrike_ioc_api_results_modified' call
    for http_cs_query_ip_result_item in http_cs_query_ip_result_data:
        parameters.append({
            "crowdstrike_parsed_response_body": http_cs_query_ip_result_item[0],
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/parse_crowdstrike_ioc_api_results_modified", parameters=parameters, name="cf_mbs_parse_crowdstrike_ioc_api_results_modified", callback=fb_ip_analysis_notes)

    return


@phantom.playbook_block()
def fb_ip_analysis_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_ip_analysis_notes() called")

    ################################################################################
    # Prepare notes for the analyst from the File investigation results
    ################################################################################

    template = """Crowdstrike IP investigation Results as below.\n\n%%\n{0}\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_parse_crowdstrike_ioc_api_results_modified:custom_function_result.data.results"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_ip_analysis_notes", separator=", ")

    api_note_ip_analysis(container=container)

    return


@phantom.playbook_block()
def api_note_ip_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_ip_analysis() called")

    ################################################################################
    # Add a note with the file analysis results.
    ################################################################################

    fb_ip_analysis_notes = phantom.get_format_data(name="fb_ip_analysis_notes")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_ip_analysis_notes, note_format="html", title="IP Investigation Results CrowdStrike")

    return


@phantom.playbook_block()
def fl_source_dest_addresses(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_source_dest_addresses() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["internal", "not in", "filtered-data:filter_4:condition_1:artifact:*.tags"],
            ["previously_processed", "not in", "filtered-data:filter_4:condition_1:artifact:*.tags"],
            ["filtered-data:filter_4:condition_1:artifact:*.cef.public_ip", "==", True],
            ["added_from_playbook", "==", "artifact:*.label"]
        ],
        name="fl_source_dest_addresses:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        cf_mbs_list_merge_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def cf_mbs_list_merge_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_list_merge_1() called")

    filtered_artifact_0_data_fl_source_dest_addresses = phantom.collect2(container=container, datapath=["filtered-data:fl_source_dest_Addresses:condition_1:artifact:*.cef.destinationAddress","filtered-data:fl_source_dest_Addresses:condition_1:artifact:*.cef.sourceAddress","filtered-data:fl_source_dest_addresses:condition_1:artifact:*.id"])

    filtered_artifact_0__cef_destinationaddress = [item[0] for item in filtered_artifact_0_data_fl_source_dest_addresses]
    filtered_artifact_0__cef_sourceaddress = [item[1] for item in filtered_artifact_0_data_fl_source_dest_addresses]

    parameters = []

    parameters.append({
        "input_1": filtered_artifact_0__cef_destinationaddress,
        "input_2": filtered_artifact_0__cef_sourceaddress,
        "input_3": None,
        "input_4": None,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_mbs_list_merge_1", callback=decision_2)

    return


@phantom.playbook_block()
def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_2() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_mbs_list_merge_1:custom_function_result.data.*.item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        fb_cs_sender_ip(action=action, success=success, container=container, results=results, handle=handle)
        intsights_hunt_ip(action=action, success=success, container=container, results=results, handle=handle)
        vt_ip_reputation(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def api_note_cs_hunt_ip_no_data(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_cs_hunt_ip_no_data() called")

    fb_note_cs_hunt_ip_no_data = phantom.get_format_data(name="fb_note_cs_hunt_ip_no_data")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_note_cs_hunt_ip_no_data, note_format="html", title="Crowdstrike IP Investigation Results")

    return


@phantom.playbook_block()
def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_1() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["http_cs_query_ip:action_result.data.*.response_body.meta.pagination.total", ">", 0]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        cf_mbs_parse_crowdstrike_ioc_api_results_modified(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    fb_note_cs_hunt_ip_no_data(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return