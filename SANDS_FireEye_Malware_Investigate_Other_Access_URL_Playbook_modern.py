"""
Find other systems accessing a malicious URL.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'fl_malicious_urls' block
    fl_malicious_urls(container=container)

    return

@phantom.playbook_block()
def fl_malicious_urls(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_malicious_urls() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["malicious", "in", "artifact:*.tags"],
            ["artifact:*.cef.requestURL", "!=", ""]
        ],
        name="fl_malicious_urls:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_others_accessing_malicious_url(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def api_note_others_accessing_malicious_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_note_others_accessing_malicious_url() called")

    fb_note_others_accessing_malicious_url = phantom.get_format_data(name="fb_note_others_accessing_malicious_url")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_note_others_accessing_malicious_url, note_format="html", title="Other system accessing the malicious URL")

    return


@phantom.playbook_block()
def spl_others_accessing_malicious_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("spl_others_accessing_malicious_url() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_others_accessing_malicious_url__as_list = phantom.get_format_data(name="fb_others_accessing_malicious_url__as_list")

    parameters = []

    # build parameters list for 'spl_others_accessing_malicious_url' call
    for fb_others_accessing_malicious_url__item in fb_others_accessing_malicious_url__as_list:
        if fb_others_accessing_malicious_url__item is not None:
            parameters.append({
                "query": fb_others_accessing_malicious_url__item,
                "command": "search",
                "display": "",
                "parse_only": "",
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("run query", parameters=parameters, name="spl_others_accessing_malicious_url", assets=["splunk prod"], callback=fl_spl_non_null_events_malicious_url)

    return


@phantom.playbook_block()
def fb_others_accessing_malicious_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_others_accessing_malicious_url() called")

    template = """%%\n(index=network (sourcetype=\"bluecoat:proxysg:access:syslog\" OR sourcetype=zscalernss-web)) (\"{0}\") earliest=-90d@d\n| table _time, action, user, device_name, referer_domain, status, location, department, url\n| dedup user\n| where NOT like(url,\"%trustedsource%\") AND NOT like(url,\"%splunkcloud%\") AND NOT like(url,\"%virustotal%\") AND NOT like(url,\"%url2png%\") AND NOT like(url,\"%threatcrowd%\") AND NOT like(url,\"%any.run%\") AND NOT like(url,\"%urlscan.io%\")\n| rename action as Action, user as User, device_name as \"User Hostname\", referer_domain as \"Referer Domain\", status as Status, location as Location, department as Department, url as URL\n| sort - _time\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_Malicious_URLs:condition_1:artifact:*.cef.requestURL"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_others_accessing_malicious_url", separator=", ")

    spl_others_accessing_malicious_url(container=container)

    return


@phantom.playbook_block()
def fb_note_others_accessing_malicious_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_note_others_accessing_malicious_url() called")

    template = """Below are the list of users who accessed the malicious URLs.\n\n%%\nUser: {0}\nIP: {1}\n\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_SPL_Non_Null_Events_Malicious_URL:condition_1:spl_others_accessing_malicious_url:action_result.data.*.src_user",
        "filtered-data:FL_SPL_Non_Null_Events_Malicious_URL:condition_1:spl_others_accessing_malicious_url:action_result.data.*.src_ip"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_note_others_accessing_malicious_url", separator=", ")

    api_note_others_accessing_malicious_url(container=container)

    return


@phantom.playbook_block()
def other_system_accessing_the_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("other_system_accessing_the_url() called")

    ################################################################################
    # Add the comment if other system accessing the URL is found from the Splunk trawl 
    # results.
    ################################################################################

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment="Other system accessing the URL")

    add_note_4(container=container)

    return


@phantom.playbook_block()
def add_note_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_note_4() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content="No data found", note_format="html", title="Other system accessing the malicious URL")

    return


@phantom.playbook_block()
def fl_spl_non_null_events_malicious_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_spl_non_null_events_malicious_url() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["spl_others_accessing_malicious_url:action_result.summary.total_events", ">", 0]
        ],
        name="fl_spl_non_null_events_malicious_url:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_note_others_accessing_malicious_url(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    # collect filtered artifact ids and results for 'if' condition 2
    matched_artifacts_2, matched_results_2 = phantom.condition(
        container=container,
        conditions=[
            ["spl_others_accessing_malicious_url:action_result.summary.total_events", "==", 0]
        ],
        name="fl_spl_non_null_events_malicious_url:condition_2",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_2 or matched_results_2:
        other_system_accessing_the_url(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return