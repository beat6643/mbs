"""
This playbook finds the OS type of the end point device from the hostname (preference) or from the IP.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'db_is_client_ip_exist' block
    db_is_client_ip_exist(container=container)

    return

@phantom.playbook_block()
def spl_client_os_rapid7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("spl_client_os_rapid7() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_spl_client_os_rapid7 = phantom.get_format_data(name="fb_spl_client_os_rapid7")

    parameters = []

    if fb_spl_client_os_rapid7 is not None:
        parameters.append({
            "query": fb_spl_client_os_rapid7,
            "command": "search",
            "display": "",
            "parse_only": "",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("run query", parameters=parameters, name="spl_client_os_rapid7", assets=["splunk prod"], callback=db_is_client_os_rapid7_event_exist)

    return


@phantom.playbook_block()
def decision_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_6() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        logical_operator="or",
        conditions=[
            ["windows", "in", "cf_extract_os_from_event_fsctcenter:custom_function_result.data.output_item"],
            ["linux", "in", "cf_extract_os_from_event_fsctcenter:custom_function_result.data.output_item"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        decision_7(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    join_fb_spl_client_os_rapid7(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def ph_update_artifact_os_type_linux(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_os_type_linux() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_os_artifact = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_OS_Artifact:condition_1:artifact:*.id","filtered-data:fl_host_os_artifact:condition_1:artifact:*.id"], scope="all")

    parameters = []

    # build parameters list for 'ph_update_artifact_os_type_linux' call
    for filtered_artifact_0_item_fl_host_os_artifact in filtered_artifact_0_data_fl_host_os_artifact:
        if filtered_artifact_0_item_fl_host_os_artifact[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": "{\"host_os_type\": \"Linux\"}",
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_os_artifact[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_os_artifact[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="ph_update_artifact_os_type_linux", assets=["phantom"])

    return


@phantom.playbook_block()
def spl_client_os_fsctcenter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("spl_client_os_fsctcenter() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_spl_client_os_fsctcenter = phantom.get_format_data(name="fb_spl_client_os_fsctcenter")

    parameters = []

    if fb_spl_client_os_fsctcenter is not None:
        parameters.append({
            "query": fb_spl_client_os_fsctcenter,
            "command": "search",
            "display": "",
            "parse_only": "",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("run query", parameters=parameters, name="spl_client_os_fsctcenter", assets=["splunk prod"], callback=db_is_client_os_fsctcenter_event_exist)

    return


@phantom.playbook_block()
def db_is_client_ip_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_client_ip_exist() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.cef.sourceAddress", "!=", ""],
            ["client_ip", "in", "artifact:*.tags"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        fl_host_artifact(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    api_addcomment_client_ip_not_found(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def decision_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_5() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["Hostname: Irresolvable", "not in", "spl_client_os_fsctcenter:action_result.data.*._raw"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        cf_mbs_extract_regex_from_list_2(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def db_is_client_os_rapid7_event_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_client_os_rapid7_event_exist() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["spl_client_os_rapid7:action_result.summary.total_events", ">", 0]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        fb_host_os_rapid7(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    api_add__note_comment_couldnt_find_os(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def api_add__note_comment_couldnt_find_os(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_add__note_comment_couldnt_find_os() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment="Couldn't find OS type.")
    phantom.add_note(container=container, content="Phantom couldn't find the OS type of the client IP. Hence the analyst need to take over and manually investigate this event.", note_format="html", title="Couldn't find OS Type Analyst to manually investigate")

    return


@phantom.playbook_block()
def api_add_comment_unknown_os_found(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_add_comment_unknown_os_found() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment="Unknown OS found.")

    return


@phantom.playbook_block()
def ph_update_artifact_os_type_windows(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_os_type_windows() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_os_artifact = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_OS_Artifact:condition_1:artifact:*.id","filtered-data:fl_host_os_artifact:condition_1:artifact:*.id"], scope="all")

    parameters = []

    # build parameters list for 'ph_update_artifact_os_type_windows' call
    for filtered_artifact_0_item_fl_host_os_artifact in filtered_artifact_0_data_fl_host_os_artifact:
        if filtered_artifact_0_item_fl_host_os_artifact[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": "{\"host_os_type\": \"Windows\"}",
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_os_artifact[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_os_artifact[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="ph_update_artifact_os_type_windows", assets=["phantom"])

    return


@phantom.playbook_block()
def fl_host_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_host_artifact() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["artifact:*.name", "==", "Host Artifact"]
        ],
        name="fl_host_artifact:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_spl_client_os_fsctcenter(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def db_is_client_os_fsctcenter_event_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_client_os_fsctcenter_event_exist() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["spl_client_os_fsctcenter:action_result.summary.total_events", ">", 0]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        cf_extract_os_from_event_fsctcenter(action=action, success=success, container=container, results=results, handle=handle)
        decision_5(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    join_fb_spl_client_os_rapid7(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def api_addcomment_client_ip_not_found(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_addcomment_client_ip_not_found() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment="Client IP not found to get the OS type of.")

    return


@phantom.playbook_block()
def fb_spl_client_os_fsctcenter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_spl_client_os_fsctcenter() called")

    template = """index=security sourcetype=\"fsctcenter_avp \"{0}\" Operating System:\" NOT (\"Operating System: Unknown\") NOT (\"Operating System: Multiple Suggestions\") earliest=-15m \n| dedup sourcetype"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_Host_Artifact:condition_1:artifact:*.cef.client_ip"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_spl_client_os_fsctcenter", separator=", ")

    spl_client_os_fsctcenter(container=container)

    return


@phantom.playbook_block()
def join_fb_spl_client_os_rapid7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("join_fb_spl_client_os_rapid7() called")

    if phantom.completed(custom_function_names=["cf_extract_os_from_event_fsctcenter"], action_names=["spl_client_os_fsctcenter"]):
        # call connected block "fb_spl_client_os_rapid7"
        fb_spl_client_os_rapid7(container=container, handle=handle)

    return


@phantom.playbook_block()
def fb_spl_client_os_rapid7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_spl_client_os_rapid7() called")

    template = """index=rapid7 sourcetype=\"rapid7:insightvm:asset\"  {0} \n earliest=-30d \n| dedup os"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_Host_Artifact:condition_1:artifact:*.cef.client_ip"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_spl_client_os_rapid7", separator=", ")

    spl_client_os_rapid7(container=container)

    return


@phantom.playbook_block()
def fb_update_artifact_host_name_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_update_artifact_host_name_1() called")

    template = """{{\"host_name\": \"{0}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_extract_regex_from_list_2:custom_function_result.data.output_item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_update_artifact_host_name_1", scope="all", separator=", ")

    ph_update_artifact_host_name_1(container=container)

    return


@phantom.playbook_block()
def fb_host_os_fsctcenter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_host_os_fsctcenter() called")

    template = """{{\"host_os\": \"{0}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "cf_extract_os_from_event_fsctcenter:custom_function_result.data.output_item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_host_os_fsctcenter", separator=", ")

    ph_update_artifact_fsctcenter(container=container)

    return


@phantom.playbook_block()
def ph_update_artifact_host_name_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_host_name_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact:condition_1:artifact:*.id","filtered-data:fl_host_artifact:condition_1:artifact:*.id"], scope="all")
    fb_update_artifact_host_name_1 = phantom.get_format_data(name="fb_update_artifact_host_name_1")

    parameters = []

    # build parameters list for 'ph_update_artifact_host_name_1' call
    for filtered_artifact_0_item_fl_host_artifact in filtered_artifact_0_data_fl_host_artifact:
        if filtered_artifact_0_item_fl_host_artifact[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": fb_update_artifact_host_name_1,
                "severity": "",
                "overwrite": True,
                "artifact_id": filtered_artifact_0_item_fl_host_artifact[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="ph_update_artifact_host_name_1", assets=["phantom"])

    return


@phantom.playbook_block()
def ph_update_artifact_fsctcenter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_fsctcenter() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact:condition_1:artifact:*.id","filtered-data:fl_host_artifact:condition_1:artifact:*.id"])
    fb_host_os_fsctcenter = phantom.get_format_data(name="fb_host_os_fsctcenter")

    parameters = []

    # build parameters list for 'ph_update_artifact_fsctcenter' call
    for filtered_artifact_0_item_fl_host_artifact in filtered_artifact_0_data_fl_host_artifact:
        if filtered_artifact_0_item_fl_host_artifact[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": fb_host_os_fsctcenter,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="ph_update_artifact_fsctcenter", assets=["phantom"], callback=join_fl_host_os_artifact)

    return


@phantom.playbook_block()
def join_fl_host_os_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("join_fl_host_os_artifact() called")

    # if the joined function has already been called, do nothing
    if phantom.get_run_data(key="join_fl_host_os_artifact_called"):
        return

    # save the state that the joined function has now been called
    phantom.save_run_data(key="join_fl_host_os_artifact_called", value="fl_host_os_artifact")

    # call connected block "fl_host_os_artifact"
    fl_host_os_artifact(container=container, handle=handle)

    return


@phantom.playbook_block()
def fl_host_os_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_host_os_artifact() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["artifact:*.cef.host_os", "!=", ""]
        ],
        name="fl_host_os_artifact:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        db_identify_os(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def db_identify_os(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_identify_os() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["windows", "in", "filtered-data:FL_Host_OS_Artifact:condition_1:artifact:*.cef.host_os"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        ph_update_artifact_os_type_windows(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'elif' condition 2
    found_match_2 = phantom.decision(
        container=container,
        conditions=[
            ["linux", "in", "filtered-data:FL_Host_OS_Artifact:condition_1:artifact:*.cef.host_os"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 2 matched
    if found_match_2:
        ph_update_artifact_os_type_linux(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 3
    api_add_comment_unknown_os_found(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def fb_host_os_rapid7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_host_os_rapid7() called")

    template = """{{\"host_os\": \"{0}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "spl_client_os_rapid7:action_result.data.*.os"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_host_os_rapid7", separator=", ")

    ph_update_artifact_rapid7(container=container)

    return


@phantom.playbook_block()
def ph_update_artifact_rapid7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_rapid7() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact:condition_1:artifact:*.id","filtered-data:fl_host_artifact:condition_1:artifact:*.id"])
    fb_host_os_rapid7 = phantom.get_format_data(name="fb_host_os_rapid7")

    parameters = []

    # build parameters list for 'ph_update_artifact_rapid7' call
    for filtered_artifact_0_item_fl_host_artifact in filtered_artifact_0_data_fl_host_artifact:
        if filtered_artifact_0_item_fl_host_artifact[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": fb_host_os_rapid7,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="ph_update_artifact_rapid7", assets=["phantom"], callback=join_fl_host_os_artifact)

    return


@phantom.playbook_block()
def decision_7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_7() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_extract_os_from_event_fsctcenter:custom_function_result.data.output_item", "!=", "windows"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        fb_host_os_fsctcenter(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    join_fb_spl_client_os_rapid7(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def cf_mbs_extract_regex_from_list_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_extract_regex_from_list_2() called")

    spl_client_os_fsctcenter_result_data = phantom.collect2(container=container, datapath=["spl_client_os_fsctcenter:action_result.data.*._raw","spl_client_os_fsctcenter:action_result.parameter.context.artifact_id"], action_results=results)

    spl_client_os_fsctcenter_result_item_0 = [item[0] for item in spl_client_os_fsctcenter_result_data]

    parameters = []

    parameters.append({
        "input_list": spl_client_os_fsctcenter_result_item_0,
        "regex_pattern": "Hostname: (.+)\\s",
        "output_as_string": True,
        "drop_or_pass_input_ioc": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/extract_regex_from_list", parameters=parameters, name="cf_mbs_extract_regex_from_list_2", callback=fb_update_artifact_host_name_1)

    return


@phantom.playbook_block()
def cf_extract_os_from_event_fsctcenter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_extract_os_from_event_fsctcenter() called")

    spl_client_os_fsctcenter_result_data = phantom.collect2(container=container, datapath=["spl_client_os_fsctcenter:action_result.data.*._raw","spl_client_os_fsctcenter:action_result.parameter.context.artifact_id"], action_results=results)

    spl_client_os_fsctcenter_result_item_0 = [item[0] for item in spl_client_os_fsctcenter_result_data]

    parameters = []

    parameters.append({
        "input_list": spl_client_os_fsctcenter_result_item_0,
        "regex_pattern": "Operating System: (.+)$",
        "output_as_string": True,
        "drop_or_pass_input_ioc": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/extract_regex_from_list", parameters=parameters, name="cf_extract_os_from_event_fsctcenter", callback=decision_6)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return