"""
This playbook adds a tag internal to the below internal IOCs\n\n- domains\n- URLs\n\nIt also marks public ip addresses as public_ip.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'fl_required_artifacts_for_tagging_check' block
    fl_required_artifacts_for_tagging_check(container=container)

    return

@phantom.playbook_block()
def fl_public_ip_artifacts_mapping(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_public_ip_artifacts_mapping() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_2:artifact:*.cef.sourceAddress", "==", "cf_filter_public_ips:custom_function_result.data.public_ip_list.*.item"],
            ["filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_2:artifact:*.cef.destinationAddress", "==", "cf_filter_public_ips:custom_function_result.data.public_ip_list.*.item"]
        ],
        name="fl_public_ip_artifacts_mapping:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        ph_update_artifact_public_ip(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fl_required_artifacts_for_tagging_check(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_required_artifacts_for_tagging_check() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["artifact:*.cef.destinationDnsDomain", "!=", ""],
            ["artifact:*.cef.sourceDnsDomain", "!=", ""],
            ["artifact:*.cef.requestURL", "!=", ""]
        ],
        name="fl_required_artifacts_for_tagging_check:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        cf_mbs_list_merge_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    # collect filtered artifact ids and results for 'if' condition 2
    matched_artifacts_2, matched_results_2 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["artifact:*.cef.sourceAddress", "!=", ""],
            ["artifact:*.cef.destinationAddress", "!=", ""]
        ],
        name="fl_required_artifacts_for_tagging_check:condition_2",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_2 or matched_results_2:
        fl_label_added_from_playbook(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)

    return


@phantom.playbook_block()
def fl_label_added_from_playbook(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_label_added_from_playbook() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_2:artifact:*.label", "==", "added_from_playbook"]
        ],
        name="fl_label_added_from_playbook:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        cf_filter_public_ips(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fl_mapping_cf_output_to_artifact_iocs(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_mapping_cf_output_to_artifact_iocs() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="or",
        conditions=[
            ["cf_mbs_filter_value_in_custom_list_2:custom_function_result.data.match_list.*.item", "==", "filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_1:artifact:*.cef.destinationDnsDomain"],
            ["cf_mbs_filter_value_in_custom_list_2:custom_function_result.data.match_list.*.item", "==", "filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_1:artifact:*.cef.sourceDnsDomain"],
            ["cf_mbs_filter_value_in_custom_list_2:custom_function_result.data.match_list.*.item", "==", "filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_1:artifact:*.cef.email_sender_domain"],
            ["cf_mbs_filter_value_in_custom_list_2:custom_function_result.data.match_list.*.item", "==", "filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_1:artifact:*.cef.requestURL"]
        ],
        name="fl_mapping_cf_output_to_artifact_iocs:condition_1",
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        ph_add_tag_whitelisted_domain_url(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def db_non_null_items(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_non_null_items() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_mbs_filter_value_in_custom_list_2:custom_function_result.data.match_list.*.item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        fl_mapping_cf_output_to_artifact_iocs(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def ph_add_tag_whitelisted_domain_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_add_tag_whitelisted_domain_url() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_mapping_cf_output_to_artifact_iocs = phantom.collect2(container=container, datapath=["filtered-data:FL_Mapping_CF_Output_To_Artifact_IOCs:condition_1:artifact:*.id","filtered-data:fl_mapping_cf_output_to_artifact_iocs:condition_1:artifact:*.id"], scope="all")

    parameters = []

    # build parameters list for 'ph_add_tag_whitelisted_domain_url' call
    for filtered_artifact_0_item_fl_mapping_cf_output_to_artifact_iocs in filtered_artifact_0_data_fl_mapping_cf_output_to_artifact_iocs:
        if filtered_artifact_0_item_fl_mapping_cf_output_to_artifact_iocs[0] is not None:
            parameters.append({
                "add_tags": "whitelisted_domain",
                "artifact_id": filtered_artifact_0_item_fl_mapping_cf_output_to_artifact_iocs[0],
                "remove_tags": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_mapping_cf_output_to_artifact_iocs[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact tags", parameters=parameters, name="ph_add_tag_whitelisted_domain_url", assets=["phantom"])

    return


@phantom.playbook_block()
def ph_update_artifact_public_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_public_ip() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_public_ip_artifacts_mapping = phantom.collect2(container=container, datapath=["filtered-data:FL_Public_IP_Artifacts_Mapping:condition_1:artifact:*.id","filtered-data:fl_public_ip_artifacts_mapping:condition_1:artifact:*.id"])

    parameters = []

    # build parameters list for 'ph_update_artifact_public_ip' call
    for filtered_artifact_0_item_fl_public_ip_artifacts_mapping in filtered_artifact_0_data_fl_public_ip_artifacts_mapping:
        if filtered_artifact_0_item_fl_public_ip_artifacts_mapping[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": "{\"public_ip\": \"true\"}",
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_public_ip_artifacts_mapping[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_public_ip_artifacts_mapping[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="ph_update_artifact_public_ip", assets=["phantom"])

    return


@phantom.playbook_block()
def cf_mbs_list_merge_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_list_merge_1() called")

    filtered_artifact_0_data_fl_required_artifacts_for_tagging_check = phantom.collect2(container=container, datapath=["filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_1:artifact:*.cef.destinationDnsDomain","filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_1:artifact:*.cef.sourceDnsDomain","filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_1:artifact:*.cef.email_sender_domain","filtered-data:FL_Required_Artifacts_For_Tagging_Check:condition_1:artifact:*.cef.requestURL","filtered-data:fl_required_artifacts_for_tagging_check:condition_1:artifact:*.id"])

    filtered_artifact_0__cef_destinationdnsdomain = [item[0] for item in filtered_artifact_0_data_fl_required_artifacts_for_tagging_check]
    filtered_artifact_0__cef_sourcednsdomain = [item[1] for item in filtered_artifact_0_data_fl_required_artifacts_for_tagging_check]
    filtered_artifact_0__cef_email_sender_domain = [item[2] for item in filtered_artifact_0_data_fl_required_artifacts_for_tagging_check]
    filtered_artifact_0__cef_requesturl = [item[3] for item in filtered_artifact_0_data_fl_required_artifacts_for_tagging_check]

    parameters = []

    parameters.append({
        "input_1": filtered_artifact_0__cef_destinationdnsdomain,
        "input_2": filtered_artifact_0__cef_sourcednsdomain,
        "input_3": filtered_artifact_0__cef_email_sender_domain,
        "input_4": filtered_artifact_0__cef_requesturl,
        "input_5": None,
        "input_6": None,
        "input_7": None,
        "input_8": None,
        "input_9": None,
        "input_10": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/list_merge", parameters=parameters, name="cf_mbs_list_merge_1", callback=cf_mbs_filter_value_in_custom_list_2)

    return


@phantom.playbook_block()
def cf_mbs_filter_value_in_custom_list_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_filter_value_in_custom_list_2() called")

    cf_mbs_list_merge_1_data = phantom.collect2(container=container, datapath=["cf_mbs_list_merge_1:custom_function_result.data.*.item"])

    cf_mbs_list_merge_1_data___item = [item[0] for item in cf_mbs_list_merge_1_data]

    parameters = []

    parameters.append({
        "value_list": cf_mbs_list_merge_1_data___item,
        "custom_list_name": "Sands Identifiable Keywords",
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/filter_value_in_custom_list", parameters=parameters, name="cf_mbs_filter_value_in_custom_list_2", callback=db_non_null_items)

    return


@phantom.playbook_block()
def cf_filter_public_ips(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_filter_public_ips() called")

    filtered_artifact_0_data_fl_label_added_from_playbook = phantom.collect2(container=container, datapath=["filtered-data:FL_Label_added_from_playbook:condition_1:artifact:*.cef.destinationAddress","filtered-data:FL_Label_added_from_playbook:condition_1:artifact:*.cef.sourceAddress","filtered-data:fl_label_added_from_playbook:condition_1:artifact:*.id"])

    filtered_artifact_0__cef_destinationaddress = [item[0] for item in filtered_artifact_0_data_fl_label_added_from_playbook]
    filtered_artifact_0__cef_sourceaddress = [item[1] for item in filtered_artifact_0_data_fl_label_added_from_playbook]

    parameters = []

    parameters.append({
        "sourceAddress": filtered_artifact_0__cef_destinationaddress,
        "destinationAddress": filtered_artifact_0__cef_sourceaddress,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/Filter_Public_IPs", parameters=parameters, name="cf_filter_public_ips", callback=fl_public_ip_artifacts_mapping)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return