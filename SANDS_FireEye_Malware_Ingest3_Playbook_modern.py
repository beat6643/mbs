"""
Ingest additional data into the container.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'db_is_client_ip_exist' block
    db_is_client_ip_exist(container=container)

    return

@phantom.playbook_block()
def fl_client_ip_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_client_ip_artifact() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.cef.sourceAddress", "!=", ""],
            ["client_ip", "in", "artifact:*.tags"]
        ],
        name="fl_client_ip_artifact:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fl_host_artifact(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def fl_host_artifact(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_host_artifact() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["artifact:*.name", "==", "Host Artifact"]
        ],
        name="fl_host_artifact:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        db_is_shost_exist(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def db_is_client_ip_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_client_ip_exist() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        logical_operator="or",
        conditions=[
            ["artifact:*.cef.sourceAddress", "in", "custom_list:DNS IP List"],
            ["artifact:*.cef.sourceAddress", "in", "custom_list:Proxy IP List"]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        fl_client_ip(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'elif' condition 2
    found_match_2 = phantom.decision(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.cef.sourceAddress", "!=", ""],
            ["client_ip", "in", "artifact:*.tags"]
        ],
        delimiter=None)

    # call connected blocks if condition 2 matched
    if found_match_2:
        fl_client_ip_artifact(action=action, success=success, container=container, results=results, handle=handle)
        fl_host_artifact_2(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 3
    api_add_comment_client_ip_not_exist(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def fl_client_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_client_ip() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.cef.sourceAddress", "!=", ""],
            ["added_from_playbook", "==", "artifact:*.label"]
        ],
        name="fl_client_ip:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        fb_client_ip_is_proxy_ip(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def decision_9(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_9() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        logical_operator="or",
        conditions=[
            ["Server", "in", "artifact:*.cef.host_os"],
            ["Linux", "in", "artifact:*.cef.host_os"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        format_10(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'elif' condition 2
    found_match_2 = phantom.decision(
        container=container,
        conditions=[
            ["artifact:*.cef.host_os", "!=", ""]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 2 matched
    if found_match_2:
        format_11(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 3
    add_comment_6(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def fl_host_artifact_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fl_host_artifact_2() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["artifact:*.name", "==", "Host Artifact"]
        ],
        name="fl_host_artifact_2:condition_1",
        delimiter=None)

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        decision_9(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def join_decision_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("join_decision_6() called")

    # if the joined function has already been called, do nothing
    if phantom.get_run_data(key="join_decision_6_called"):
        return

    # save the state that the joined function has now been called
    phantom.save_run_data(key="join_decision_6_called", value="decision_6")

    # call connected block "decision_6"
    decision_6(container=container, handle=handle)

    return


@phantom.playbook_block()
def decision_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_6() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.name", "==", "Event Details Artifact"],
            ["artifact:*.cef.deviceAddress", "!=", ""],
            ["artifact:*.cef.deviceAddress", "in", "custom_list:MBS FireEye Appliance IP List"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        format_7(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'elif' condition 2
    found_match_2 = phantom.decision(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.name", "==", "Event Details Artifact"],
            ["artifact:*.cef.deviceAddress", "!=", ""],
            ["artifact:*.cef.deviceAddress", "in", "custom_list:SCL FireEye Appliance IP List"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 2 matched
    if found_match_2:
        format_8(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'elif' condition 3
    found_match_3 = phantom.decision(
        container=container,
        logical_operator="and",
        conditions=[
            ["artifact:*.name", "==", "Event Details Artifact"],
            ["artifact:*.cef.deviceAddress", "!=", ""],
            ["artifact:*.cef.deviceAddress", "in", "custom_list:CORP FireEye Appliance IP List"]
        ],
        scope="all",
        case_sensitive=True,
        delimiter=None)

    # call connected blocks if condition 3 matched
    if found_match_3:
        format_9(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 4
    format_6(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def update_artifact_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_2() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact:condition_1:artifact:*.id","filtered-data:fl_host_artifact:condition_1:artifact:*.id"], scope="all")
    format_5 = phantom.get_format_data(name="format_5")

    parameters = []

    # build parameters list for 'update_artifact_2' call
    for filtered_artifact_0_item_fl_host_artifact in filtered_artifact_0_data_fl_host_artifact:
        if filtered_artifact_0_item_fl_host_artifact[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": format_5,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_2", assets=["phantom"])

    return


@phantom.playbook_block()
def update_artifact_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_5() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact_2 = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact_2:condition_1:artifact:*.id","filtered-data:fl_host_artifact_2:condition_1:artifact:*.id"], scope="all")
    format_9 = phantom.get_format_data(name="format_9")

    parameters = []

    # build parameters list for 'update_artifact_5' call
    for filtered_artifact_0_item_fl_host_artifact_2 in filtered_artifact_0_data_fl_host_artifact_2:
        if filtered_artifact_0_item_fl_host_artifact_2[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": format_9,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact_2[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact_2[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_5", assets=["phantom"])

    return


@phantom.playbook_block()
def update_artifact_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_6() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact_2 = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact_2:condition_1:artifact:*.id","filtered-data:fl_host_artifact_2:condition_1:artifact:*.id"], scope="all")
    format_6 = phantom.get_format_data(name="format_6")

    parameters = []

    # build parameters list for 'update_artifact_6' call
    for filtered_artifact_0_item_fl_host_artifact_2 in filtered_artifact_0_data_fl_host_artifact_2:
        if filtered_artifact_0_item_fl_host_artifact_2[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": format_6,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact_2[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact_2[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_6", assets=["phantom"])

    return


@phantom.playbook_block()
def update_artifact_7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_7() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact_2 = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact_2:condition_1:artifact:*.id","filtered-data:fl_host_artifact_2:condition_1:artifact:*.id"], scope="all")
    format_7 = phantom.get_format_data(name="format_7")

    parameters = []

    # build parameters list for 'update_artifact_7' call
    for filtered_artifact_0_item_fl_host_artifact_2 in filtered_artifact_0_data_fl_host_artifact_2:
        if filtered_artifact_0_item_fl_host_artifact_2[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": format_7,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact_2[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact_2[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_7", assets=["phantom"])

    return


@phantom.playbook_block()
def update_artifact_8(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_8() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact_2 = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact_2:condition_1:artifact:*.id","filtered-data:fl_host_artifact_2:condition_1:artifact:*.id"], scope="all")
    format_8 = phantom.get_format_data(name="format_8")

    parameters = []

    # build parameters list for 'update_artifact_8' call
    for filtered_artifact_0_item_fl_host_artifact_2 in filtered_artifact_0_data_fl_host_artifact_2:
        if filtered_artifact_0_item_fl_host_artifact_2[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": format_8,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact_2[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact_2[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_8", assets=["phantom"])

    return


@phantom.playbook_block()
def ph_update_artifact_host_name_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("ph_update_artifact_host_name_2() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact:condition_1:artifact:*.id","filtered-data:fl_host_artifact:condition_1:artifact:*.id"], scope="all")
    fb_update_artifact_host_name_2 = phantom.get_format_data(name="fb_update_artifact_host_name_2")

    parameters = []

    # build parameters list for 'ph_update_artifact_host_name_2' call
    for filtered_artifact_0_item_fl_host_artifact in filtered_artifact_0_data_fl_host_artifact:
        if filtered_artifact_0_item_fl_host_artifact[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": fb_update_artifact_host_name_2,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="ph_update_artifact_host_name_2", assets=["phantom"])

    return


@phantom.playbook_block()
def api_add_comment_client_ip_not_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_add_comment_client_ip_not_exist() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment="Client IP doesn't exist in the Alert Event.")

    return


@phantom.playbook_block()
def pin_hud_proxy_dns_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("pin_hud_proxy_dns_ip() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.pin(container=container, data="Client IP is DNS/Proxy. Please identify the actual Client IP.", message="Manual intervention required", name="", pin_style="red", pin_type="card")

    return


@phantom.playbook_block()
def api_add_tag_manual_intervention(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_add_tag_manual_intervention() called")

    fb_client_ip_is_proxy_ip = phantom.get_format_data(name="fb_client_ip_is_proxy_ip")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.add_note(container=container, content=fb_client_ip_is_proxy_ip, note_format="html", title="Client IP is Proxy/DNS IP")
    phantom.add_tags(container=container, tags="manual_intervention_required")

    pin_hud_proxy_dns_ip(container=container)

    return


@phantom.playbook_block()
def fb_client_ip_is_proxy_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_client_ip_is_proxy_ip() called")

    template = """The Client IP :{0} is found to be in the Proxy/DNS IP list. So the analyst need to manually investigate thsi incident."""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_Client_IP:condition_1:artifact:*.cef.sourceAddress"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_client_ip_is_proxy_ip", separator=", ")

    api_add_tag_manual_intervention(container=container)

    return


@phantom.playbook_block()
def fb_spl_query_find_shost(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_spl_query_find_shost() called")

    template = """index=security sourcetype=\"fsctcenter_avp\" {0} \"Hostname:\" NOT (\"Hostname: Irresolvable\") earliest=-15m\n| dedup sourcetype"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_Client_IP_Artifact:condition_1:artifact:*.cef.sourceAddress"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_spl_query_find_shost", separator=", ")

    sppl_query_find_shost(container=container)

    return


@phantom.playbook_block()
def sppl_query_find_shost(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("sppl_query_find_shost() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_spl_query_find_shost = phantom.get_format_data(name="fb_spl_query_find_shost")

    parameters = []

    if fb_spl_query_find_shost is not None:
        parameters.append({
            "query": fb_spl_query_find_shost,
            "command": "search",
            "display": "",
            "parse_only": "",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("run query", parameters=parameters, name="sppl_query_find_shost", assets=["splunk prod"], callback=db_spl_is_shost_found)

    return


@phantom.playbook_block()
def format_11(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_11() called")

    template = """{{\"host_type\": \"workstation\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_11", separator=", ")

    update_artifact_3(container=container)

    return


@phantom.playbook_block()
def add_comment_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_comment_6() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment="Host OS Name is empty. Hence can't find Host OS Type")

    join_decision_6(container=container)

    return


@phantom.playbook_block()
def update_artifact_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_4() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact_2 = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact_2:condition_1:artifact:*.id","filtered-data:fl_host_artifact_2:condition_1:artifact:*.id"], scope="all")
    format_10 = phantom.get_format_data(name="format_10")

    parameters = []

    # build parameters list for 'update_artifact_4' call
    for filtered_artifact_0_item_fl_host_artifact_2 in filtered_artifact_0_data_fl_host_artifact_2:
        if filtered_artifact_0_item_fl_host_artifact_2[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": format_10,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact_2[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact_2[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_4", assets=["phantom"], callback=join_decision_6)

    return


@phantom.playbook_block()
def update_artifact_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("update_artifact_3() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    filtered_artifact_0_data_fl_host_artifact_2 = phantom.collect2(container=container, datapath=["filtered-data:FL_Host_Artifact_2:condition_1:artifact:*.id","filtered-data:fl_host_artifact_2:condition_1:artifact:*.id"], scope="all")
    format_11 = phantom.get_format_data(name="format_11")

    parameters = []

    # build parameters list for 'update_artifact_3' call
    for filtered_artifact_0_item_fl_host_artifact_2 in filtered_artifact_0_data_fl_host_artifact_2:
        if filtered_artifact_0_item_fl_host_artifact_2[0] is not None:
            parameters.append({
                "name": "",
                "tags": "",
                "label": "",
                "cef_json": format_11,
                "severity": "",
                "overwrite": "",
                "artifact_id": filtered_artifact_0_item_fl_host_artifact_2[0],
                "artifact_json": "",
                "cef_types_json": "",
                "context": {'artifact_id': filtered_artifact_0_item_fl_host_artifact_2[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("update artifact", parameters=parameters, name="update_artifact_3", assets=["phantom"], callback=join_decision_6)

    return


@phantom.playbook_block()
def fb_nslookup_format_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_nslookup_format_query() called")

    template = """%%\nnslookup \"{0}\"\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "filtered-data:FL_Client_IP_Artifact:condition_1:artifact:*.cef.sourceAddress"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_nslookup_format_query", scope="all", separator=", ", drop_none=True)

    nslookup_find_shost_mbs(container=container)

    return


@phantom.playbook_block()
def db_spl_is_shost_found(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_spl_is_shost_found() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["sppl_query_find_shost:action_result.summary.total_events", "!=", 0]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        cf_mbs_extract_regex_from_list_2(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    fb_nslookup_format_query(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def format_8(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_8() called")

    template = """{{\"property_location\": \" - SCL\", \"location\": \" \"}}"""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_8", separator=", ")

    update_artifact_8(container=container)

    return


@phantom.playbook_block()
def format_7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_7() called")

    template = """{{\"property_location\": \" - MBS\", \"location\": \"Marina Bay Sands\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_7", separator=", ")

    update_artifact_7(container=container)

    return


@phantom.playbook_block()
def format_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_6() called")

    template = """{{\"property_location\": \" \", \"location\": \" \"}}"""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_6", separator=", ")

    update_artifact_6(container=container)

    return


@phantom.playbook_block()
def fb_update_artifact_host_name_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("fb_update_artifact_host_name_2() called")

    template = """{{\"host_name\": \"{0}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_extract_regex_from_list_2:custom_function_result.data.output_item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="fb_update_artifact_host_name_2", scope="all", separator=", ", drop_none=True)

    ph_update_artifact_host_name_2(container=container)

    return


@phantom.playbook_block()
def decision_7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_7() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["cf_mbs_extract_regex_from_list_2:custom_function_result.data.output_item", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        fb_update_artifact_host_name_2(action=action, success=success, container=container, results=results, handle=handle)
        return

    return


@phantom.playbook_block()
def format_9(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_9() called")

    template = """{{\"property_location\": \" - CORP\", \"location\": \"The Venetian / Palazzo Las Vegas\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_9", separator=", ")

    update_artifact_5(container=container)

    return


@phantom.playbook_block()
def format_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_5() called")

    template = """{{\"host_name\": \"{0}\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "cf_mbs_extract_regex_from_list_1:custom_function_result.data.output_item"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_5", scope="all", separator=", ", drop_none=True)

    update_artifact_2(container=container)

    return


@phantom.playbook_block()
def db_is_shost_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("db_is_shost_exist() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["filtered-data:FL_Host_Artifact:condition_1:artifact:*.cef.host_name", "!=", ""]
        ],
        delimiter=None)

    # call connected blocks if condition 1 matched
    if found_match_1:
        api_add_comment_shost_already_exist(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    fb_spl_query_find_shost(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def api_add_comment_shost_already_exist(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("api_add_comment_shost_already_exist() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment="host_name already exist in the container. No need to extract again.")

    return


@phantom.playbook_block()
def nslookup_find_shost_mbs(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("nslookup_find_shost_mbs() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    fb_nslookup_format_query__as_list = phantom.get_format_data(name="fb_nslookup_format_query__as_list")

    parameters = []

    # build parameters list for 'nslookup_find_shost_mbs' call
    for fb_nslookup_format_query__item in fb_nslookup_format_query__as_list:
        parameters.append({
            "command": fb_nslookup_format_query__item,
            "timeout": "",
            "ip_hostname": "sbphanappprd01.marinabaysands.com",
            "script_file": "",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("execute program", parameters=parameters, name="nslookup_find_shost_mbs", assets=["mbs_ssh"], callback=cf_mbs_extract_regex_from_list_1)

    return


@phantom.playbook_block()
def cf_mbs_extract_regex_from_list_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_extract_regex_from_list_2() called")

    sppl_query_find_shost_result_data = phantom.collect2(container=container, datapath=["sppl_query_find_shost:action_result.data.*._raw","sppl_query_find_shost:action_result.parameter.context.artifact_id"], action_results=results)

    sppl_query_find_shost_result_item_0 = [item[0] for item in sppl_query_find_shost_result_data]

    parameters = []

    parameters.append({
        "input_list": sppl_query_find_shost_result_item_0,
        "regex_pattern": "Hostname: (.+)\\s",
        "output_as_string": True,
        "drop_or_pass_input_ioc": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/extract_regex_from_list", parameters=parameters, name="cf_mbs_extract_regex_from_list_2", callback=decision_7)

    return


@phantom.playbook_block()
def cf_mbs_extract_regex_from_list_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("cf_mbs_extract_regex_from_list_1() called")

    nslookup_find_shost_mbs_result_data = phantom.collect2(container=container, datapath=["nslookup_find_shost_mbs:action_result.data.*.output","nslookup_find_shost_mbs:action_result.parameter.context.artifact_id"], action_results=results)

    nslookup_find_shost_mbs_result_item_0 = [item[0] for item in nslookup_find_shost_mbs_result_data]

    parameters = []

    parameters.append({
        "input_list": nslookup_find_shost_mbs_result_item_0,
        "regex_pattern": "name = (.+).",
        "output_as_string": True,
        "drop_or_pass_input_ioc": None,
    })

    ################################################################################
    ## Custom Code Start
    ################################################################################
    # Write your custom code here...
    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.custom_function(custom_function="mbs/extract_regex_from_list", parameters=parameters, name="cf_mbs_extract_regex_from_list_1", callback=format_5)

    return


@phantom.playbook_block()
def format_10(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_10() called")

    template = """{{\"host_type\": \"server\"}}"""

    # parameter list for template variable replacement
    parameters = [
        "container:id"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_10", separator=", ")

    update_artifact_4(container=container)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    return